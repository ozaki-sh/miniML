
** Conflict (shift/reduce) in state 348.
** Token involved: BAR
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern list(MorePattern) RARROW MATCH Expr WITH option(BAR) Pattern list(MorePattern) RARROW Expr MorePatternMatchExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            (?)

** In state 348, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                                 MatchExpr 
                                 MATCH Expr WITH option(BAR) PatternMatchExpr 
                                                             Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                                                                                                   MorePatternMatchExpr list(MorePatternMatchExpr) 
                                                                                                                        MorePatternMatchExpr list(MorePatternMatchExpr) 
                                                                                                                        . BAR Pattern list(MorePattern) RARROW Expr 

** In state 348, looking ahead at BAR, reducing production
** list(MorePatternMatchExpr) -> 
** is permitted because of the following sub-derivation:

Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token appears because list(MorePatternMatchExpr) can begin with BAR
                                 MatchExpr // lookahead token is inherited
                                 MATCH Expr WITH option(BAR) PatternMatchExpr // lookahead token is inherited
                                                             Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                                                   MorePatternMatchExpr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                                                                        . 

** Conflict (shift/reduce) in state 339.
** Token involved: BAR
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern list(MorePattern) RARROW MATCH Expr WITH option(BAR) Pattern list(MorePattern) RARROW Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            (?)

** In state 339, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                                 MatchExpr 
                                 MATCH Expr WITH option(BAR) PatternMatchExpr 
                                                             Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                                                                                                   MorePatternMatchExpr list(MorePatternMatchExpr) 
                                                                                                   . BAR Pattern list(MorePattern) RARROW Expr 

** In state 339, looking ahead at BAR, reducing production
** list(MorePatternMatchExpr) -> 
** is permitted because of the following sub-derivation:

Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token appears because list(MorePatternMatchExpr) can begin with BAR
                                 MatchExpr // lookahead token is inherited
                                 MATCH Expr WITH option(BAR) PatternMatchExpr // lookahead token is inherited
                                                             Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                                                   . 

** Conflict (shift/reduce) in state 309.
** Token involved: COMMA
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern COMMA ConsPattern 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                            TuplePattern 
                            TupleHeadPattern 
                            (?)

** In state 309, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

Pattern TupleTailPattern 
        COMMA ConsPattern TupleTailPattern 
                          . COMMA ConsPattern 

** In state 309, looking ahead at COMMA, reducing production
** TupleTailPattern -> COMMA ConsPattern 
** is permitted because of the following sub-derivation:

Pattern TupleTailPattern // lookahead token appears because TupleTailPattern can begin with COMMA
TuplePattern // lookahead token is inherited
TupleHeadPattern // lookahead token is inherited
Pattern TupleTailPattern // lookahead token is inherited
        COMMA ConsPattern . 

** Conflict (shift/reduce) in state 210.
** Token involved: ELSE
** This state is reached from toplevel after reading:

IF Expr THEN IF Expr THEN NotContinueExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
IfExpr 
(?)

** In state 210, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
             IfExpr 
             IF Expr THEN NotContinueExpr . ELSE NotContinueExpr 

** In state 210, looking ahead at ELSE, reducing production
** IfExpr -> IF Expr THEN NotContinueExpr 
** is permitted because of the following sub-derivation:

IF Expr THEN NotContinueExpr ELSE NotContinueExpr // lookahead token appears
             IfExpr // lookahead token is inherited
             IF Expr THEN NotContinueExpr . 

** Conflict (shift/reduce) in state 201.
** Token involved: SEMI
** This state is reached from toplevel after reading:

LBOXBRA AssignExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
ProjExpr DOT ID LARROW AssignExpr 
AExpr 
ListHeadExpr 
(?)

** In state 201, looking ahead at SEMI, shifting is permitted
** because of the following sub-derivation:

LBOXBRA Expr ListTailExpr 
        ContinueExpr 
        AssignExpr . SEMI Expr 

** In state 201, looking ahead at SEMI, reducing production
** Expr -> AssignExpr 
** is permitted because of the following sub-derivation:

LBOXBRA Expr ListTailExpr // lookahead token appears because ListTailExpr can begin with SEMI
        AssignExpr . 

** Conflict (shift/reduce) in state 195.
** Token involved: SEMI
** This state is reached from toplevel after reading:

LBOXBRA IfExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
ProjExpr DOT ID LARROW AssignExpr 
AExpr 
ListHeadExpr 
(?)

** In state 195, looking ahead at SEMI, shifting is permitted
** because of the following sub-derivation:

LBOXBRA Expr ListTailExpr 
        ContinueExpr 
        IfExpr . SEMI Expr 

** In state 195, looking ahead at SEMI, reducing production
** Expr -> IfExpr 
** is permitted because of the following sub-derivation:

LBOXBRA Expr ListTailExpr // lookahead token appears because ListTailExpr can begin with SEMI
        IfExpr . 

** Conflict (shift/reduce) in state 188.
** Token involved: AND
** This state is reached from toplevel after reading:

PMExpr PLUS IF Expr THEN AndExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
TupleExpr COLONEQ AssignExpr 
OrExpr 
AndExpr 
(?)

** In state 188, looking ahead at AND, shifting is permitted
** because of the following sub-derivation:

CmpExpr 
PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            IfExpr 
            IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
                         AssignExpr 
                         TupleExpr COLONEQ AssignExpr 
                         OrExpr 
                         AndExpr 
                         AndExpr . AND CmpExpr 

** In state 188, looking ahead at AND, reducing production
** OrExpr -> AndExpr 
** is permitted because of the following sub-derivation:

AndExpr AND CmpExpr // lookahead token appears
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            IfExpr // lookahead token is inherited
            IF Expr THEN NotContinueExpr // lookahead token is inherited
                         AssignExpr // lookahead token is inherited
                         TupleExpr // lookahead token is inherited
                         OrExpr // lookahead token is inherited
                         AndExpr . 

** Conflict (shift/reduce) in state 186.
** Tokens involved: OR COMMA
** The following explanations concentrate on token OR.
** This state is reached from toplevel after reading:

PMExpr PLUS IF Expr THEN OrExpr COMMA OrExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
TupleExpr COLONEQ AssignExpr 
OrExpr 
(?)

** In state 186, looking ahead at OR, shifting is permitted
** because of the following sub-derivation:

AndExpr 
CmpExpr 
PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            IfExpr 
            IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
                         AssignExpr 
                         TupleExpr COLONEQ AssignExpr 
                         TupleHeadExpr 
                         OrExpr TupleTailExpr 
                                COMMA OrExpr 
                                      OrExpr . OR AndExpr 

** In state 186, looking ahead at OR, reducing production
** TupleTailExpr -> COMMA OrExpr 
** is permitted because of the following sub-derivation:

OrExpr OR AndExpr // lookahead token appears
AndExpr // lookahead token is inherited
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            IfExpr // lookahead token is inherited
            IF Expr THEN NotContinueExpr // lookahead token is inherited
                         AssignExpr // lookahead token is inherited
                         TupleExpr // lookahead token is inherited
                         TupleHeadExpr // lookahead token is inherited
                         OrExpr TupleTailExpr // lookahead token is inherited
                                COMMA OrExpr . 

** Conflict (shift/reduce) in state 184.
** Token involved: EQ
** This state is reached from toplevel after reading:

PMExpr PLUS IF Expr THEN AndExpr AND CmpExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
TupleExpr COLONEQ AssignExpr 
OrExpr 
AndExpr 
CmpExpr 
(?)

** In state 184, looking ahead at EQ, reducing production
** AndExpr -> AndExpr AND CmpExpr 
** is permitted because of the following sub-derivation:

CmpExpr EQ PMExpr // lookahead token appears
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            IfExpr // lookahead token is inherited
            IF Expr THEN NotContinueExpr // lookahead token is inherited
                         AssignExpr // lookahead token is inherited
                         TupleExpr // lookahead token is inherited
                         OrExpr // lookahead token is inherited
                         AndExpr // lookahead token is inherited
                         AndExpr AND CmpExpr . 

** In state 184, looking ahead at EQ, shifting is permitted
** because of the following sub-derivation:

PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            IfExpr 
            IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
                         AssignExpr 
                         TupleExpr COLONEQ AssignExpr 
                         OrExpr 
                         AndExpr 
                         AndExpr AND CmpExpr 
                                     CmpExpr . EQ PMExpr 

** Conflict (shift/reduce) in state 181.
** Token involved: AND
** This state is reached from toplevel after reading:

PMExpr PLUS IF Expr THEN OrExpr OR AndExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
TupleExpr COLONEQ AssignExpr 
OrExpr 
AndExpr 
(?)

** In state 181, looking ahead at AND, shifting is permitted
** because of the following sub-derivation:

CmpExpr 
PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            IfExpr 
            IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
                         AssignExpr 
                         TupleExpr COLONEQ AssignExpr 
                         OrExpr 
                         OrExpr OR AndExpr 
                                   AndExpr . AND CmpExpr 

** In state 181, looking ahead at AND, reducing production
** OrExpr -> OrExpr OR AndExpr 
** is permitted because of the following sub-derivation:

AndExpr AND CmpExpr // lookahead token appears
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            IfExpr // lookahead token is inherited
            IF Expr THEN NotContinueExpr // lookahead token is inherited
                         AssignExpr // lookahead token is inherited
                         TupleExpr // lookahead token is inherited
                         OrExpr // lookahead token is inherited
                         OrExpr OR AndExpr . 

** Conflict (shift/reduce) in state 179.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS IF Expr THEN CmpExpr EQ PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
TupleExpr COLONEQ AssignExpr 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 179, looking ahead at PLUS, reducing production
** CmpExpr -> CmpExpr EQ PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            IfExpr // lookahead token is inherited
            IF Expr THEN NotContinueExpr // lookahead token is inherited
                         AssignExpr // lookahead token is inherited
                         TupleExpr // lookahead token is inherited
                         OrExpr // lookahead token is inherited
                         AndExpr // lookahead token is inherited
                         CmpExpr // lookahead token is inherited
                         CmpExpr EQ PMExpr . 

** In state 179, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            IfExpr 
            IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
                         AssignExpr 
                         TupleExpr COLONEQ AssignExpr 
                         OrExpr 
                         AndExpr 
                         CmpExpr 
                         CmpExpr EQ PMExpr 
                                    PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 177.
** Token involved: EQ
** This state is reached from toplevel after reading:

PMExpr PLUS IF Expr THEN CmpExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
TupleExpr COLONEQ AssignExpr 
OrExpr 
AndExpr 
CmpExpr 
(?)

** In state 177, looking ahead at EQ, reducing production
** AndExpr -> CmpExpr 
** is permitted because of the following sub-derivation:

CmpExpr EQ PMExpr // lookahead token appears
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            IfExpr // lookahead token is inherited
            IF Expr THEN NotContinueExpr // lookahead token is inherited
                         AssignExpr // lookahead token is inherited
                         TupleExpr // lookahead token is inherited
                         OrExpr // lookahead token is inherited
                         AndExpr // lookahead token is inherited
                         CmpExpr . 

** In state 177, looking ahead at EQ, shifting is permitted
** because of the following sub-derivation:

PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            IfExpr 
            IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
                         AssignExpr 
                         TupleExpr COLONEQ AssignExpr 
                         OrExpr 
                         AndExpr 
                         CmpExpr 
                         CmpExpr . EQ PMExpr 

** Conflict (shift/reduce) in state 173.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS IF Expr THEN HExpr CONS PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
TupleExpr COLONEQ AssignExpr 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 173, looking ahead at PLUS, reducing production
** HExpr -> PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            IfExpr // lookahead token is inherited
            IF Expr THEN NotContinueExpr // lookahead token is inherited
                         AssignExpr // lookahead token is inherited
                         TupleExpr // lookahead token is inherited
                         OrExpr // lookahead token is inherited
                         AndExpr // lookahead token is inherited
                         CmpExpr // lookahead token is inherited
                         ConsExpr // lookahead token is inherited
                         HExpr CONS ConsExpr // lookahead token is inherited
                                    HExpr // lookahead token is inherited
                                    PMExpr . 

** In state 173, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            IfExpr 
            IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
                         AssignExpr 
                         TupleExpr COLONEQ AssignExpr 
                         OrExpr 
                         AndExpr 
                         CmpExpr 
                         ConsExpr 
                         HExpr CONS ConsExpr 
                                    HExpr CONS ConsExpr 
                                    PMExpr 
                                    PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 170.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS IF Expr THEN HExpr HAT PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
TupleExpr COLONEQ AssignExpr 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 170, looking ahead at PLUS, reducing production
** HExpr -> HExpr HAT PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            IfExpr // lookahead token is inherited
            IF Expr THEN NotContinueExpr // lookahead token is inherited
                         AssignExpr // lookahead token is inherited
                         TupleExpr // lookahead token is inherited
                         OrExpr // lookahead token is inherited
                         AndExpr // lookahead token is inherited
                         CmpExpr // lookahead token is inherited
                         ConsExpr // lookahead token is inherited
                         HExpr // lookahead token is inherited
                         HExpr HAT PMExpr . 

** In state 170, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            IfExpr 
            IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
                         AssignExpr 
                         TupleExpr COLONEQ AssignExpr 
                         OrExpr 
                         AndExpr 
                         CmpExpr 
                         ConsExpr 
                         HExpr CONS ConsExpr 
                         HExpr HAT PMExpr 
                                   PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 168.
** Tokens involved: HAT CONS
** The following explanations concentrate on token HAT.
** This state is reached from toplevel after reading:

PMExpr PLUS IF Expr THEN HExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
TupleExpr COLONEQ AssignExpr 
OrExpr 
AndExpr 
CmpExpr 
(?)

** In state 168, looking ahead at HAT, reducing production
** ConsExpr -> HExpr 
** is permitted because of the following sub-derivation:

ConsExpr 
HExpr CONS ConsExpr 
HExpr HAT PMExpr // lookahead token appears
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            IfExpr // lookahead token is inherited
            IF Expr THEN NotContinueExpr // lookahead token is inherited
                         AssignExpr // lookahead token is inherited
                         TupleExpr // lookahead token is inherited
                         OrExpr // lookahead token is inherited
                         AndExpr // lookahead token is inherited
                         CmpExpr // lookahead token is inherited
                         ConsExpr // lookahead token is inherited
                         HExpr . 

** In state 168, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            IfExpr 
            IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
                         AssignExpr 
                         TupleExpr COLONEQ AssignExpr 
                         OrExpr 
                         AndExpr 
                         CmpExpr 
                         ConsExpr 
                         HExpr CONS ConsExpr 
                         HExpr . HAT PMExpr 

** Conflict (shift/reduce) in state 165.
** Tokens involved: OR COMMA
** The following explanations concentrate on token OR.
** This state is reached from toplevel after reading:

PMExpr PLUS IF Expr THEN OrExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
TupleExpr COLONEQ AssignExpr 
OrExpr 
(?)

** In state 165, looking ahead at OR, shifting is permitted
** because of the following sub-derivation:

AndExpr 
CmpExpr 
PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            IfExpr 
            IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
                         AssignExpr 
                         TupleExpr COLONEQ AssignExpr 
                         OrExpr 
                         OrExpr . OR AndExpr 

** In state 165, looking ahead at OR, reducing production
** TupleExpr -> OrExpr 
** is permitted because of the following sub-derivation:

OrExpr OR AndExpr // lookahead token appears
AndExpr // lookahead token is inherited
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            IfExpr // lookahead token is inherited
            IF Expr THEN NotContinueExpr // lookahead token is inherited
                         AssignExpr // lookahead token is inherited
                         TupleExpr // lookahead token is inherited
                         OrExpr . 

** Conflict (shift/reduce) in state 163.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS IF Expr THEN PMExpr LT PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
TupleExpr COLONEQ AssignExpr 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 163, looking ahead at PLUS, reducing production
** CmpExpr -> PMExpr LT PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            IfExpr // lookahead token is inherited
            IF Expr THEN NotContinueExpr // lookahead token is inherited
                         AssignExpr // lookahead token is inherited
                         TupleExpr // lookahead token is inherited
                         OrExpr // lookahead token is inherited
                         AndExpr // lookahead token is inherited
                         CmpExpr // lookahead token is inherited
                         PMExpr LT PMExpr . 

** In state 163, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            IfExpr 
            IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
                         AssignExpr 
                         TupleExpr COLONEQ AssignExpr 
                         OrExpr 
                         AndExpr 
                         CmpExpr 
                         PMExpr LT PMExpr 
                                   PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 160.
** Token involved: MULT
** This state is reached from toplevel after reading:

MExpr MULT IF Expr THEN MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
TupleExpr COLONEQ AssignExpr 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
(?)

** In state 160, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

MExpr MULT LookRightExpr 
           IfExpr 
           IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
                        AssignExpr 
                        TupleExpr COLONEQ AssignExpr 
                        OrExpr 
                        AndExpr 
                        CmpExpr 
                        PMExpr LT PMExpr 
                        MExpr 
                        MExpr . MULT EExpr 

** In state 160, looking ahead at MULT, reducing production
** PMExpr -> MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT EExpr // lookahead token appears
MExpr MULT LookRightExpr // lookahead token is inherited
           IfExpr // lookahead token is inherited
           IF Expr THEN NotContinueExpr // lookahead token is inherited
                        AssignExpr // lookahead token is inherited
                        TupleExpr // lookahead token is inherited
                        OrExpr // lookahead token is inherited
                        AndExpr // lookahead token is inherited
                        CmpExpr // lookahead token is inherited
                        ConsExpr // lookahead token is inherited
                        HExpr // lookahead token is inherited
                        PMExpr // lookahead token is inherited
                        MExpr . 

** Conflict (shift/reduce) in state 158.
** Token involved: MULT
** This state is reached from toplevel after reading:

MExpr MULT IF Expr THEN PMExpr MINUS MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
TupleExpr COLONEQ AssignExpr 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
(?)

** In state 158, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

MExpr MULT LookRightExpr 
           IfExpr 
           IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
                        AssignExpr 
                        TupleExpr COLONEQ AssignExpr 
                        OrExpr 
                        AndExpr 
                        CmpExpr 
                        PMExpr LT PMExpr 
                        PMExpr MINUS MExpr 
                                     MExpr . MULT EExpr 

** In state 158, looking ahead at MULT, reducing production
** PMExpr -> PMExpr MINUS MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT EExpr // lookahead token appears
MExpr MULT LookRightExpr // lookahead token is inherited
           IfExpr // lookahead token is inherited
           IF Expr THEN NotContinueExpr // lookahead token is inherited
                        AssignExpr // lookahead token is inherited
                        TupleExpr // lookahead token is inherited
                        OrExpr // lookahead token is inherited
                        AndExpr // lookahead token is inherited
                        CmpExpr // lookahead token is inherited
                        ConsExpr // lookahead token is inherited
                        HExpr // lookahead token is inherited
                        PMExpr // lookahead token is inherited
                        PMExpr MINUS MExpr . 

** Conflict (shift/reduce) in state 156.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS IF Expr THEN PMExpr MT PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
TupleExpr COLONEQ AssignExpr 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 156, looking ahead at PLUS, reducing production
** CmpExpr -> PMExpr MT PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            IfExpr // lookahead token is inherited
            IF Expr THEN NotContinueExpr // lookahead token is inherited
                         AssignExpr // lookahead token is inherited
                         TupleExpr // lookahead token is inherited
                         OrExpr // lookahead token is inherited
                         AndExpr // lookahead token is inherited
                         CmpExpr // lookahead token is inherited
                         PMExpr MT PMExpr . 

** In state 156, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            IfExpr 
            IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
                         AssignExpr 
                         TupleExpr COLONEQ AssignExpr 
                         OrExpr 
                         AndExpr 
                         CmpExpr 
                         PMExpr MT PMExpr 
                                   PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 137.
** Token involved: MULT
** This state is reached from toplevel after reading:

MExpr MULT IF Expr THEN PMExpr PLUS MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
TupleExpr COLONEQ AssignExpr 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
(?)

** In state 137, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

MExpr MULT LookRightExpr 
           IfExpr 
           IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
                        AssignExpr 
                        TupleExpr COLONEQ AssignExpr 
                        OrExpr 
                        AndExpr 
                        CmpExpr 
                        PMExpr LT PMExpr 
                        PMExpr PLUS MExpr 
                                    MExpr . MULT EExpr 

** In state 137, looking ahead at MULT, reducing production
** PMExpr -> PMExpr PLUS MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT EExpr // lookahead token appears
MExpr MULT LookRightExpr // lookahead token is inherited
           IfExpr // lookahead token is inherited
           IF Expr THEN NotContinueExpr // lookahead token is inherited
                        AssignExpr // lookahead token is inherited
                        TupleExpr // lookahead token is inherited
                        OrExpr // lookahead token is inherited
                        AndExpr // lookahead token is inherited
                        CmpExpr // lookahead token is inherited
                        ConsExpr // lookahead token is inherited
                        HExpr // lookahead token is inherited
                        PMExpr // lookahead token is inherited
                        PMExpr PLUS MExpr . 

** Conflict (shift/reduce) in state 134.
** Tokens involved: PLUS MT MINUS LT
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS IF Expr THEN PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
TupleExpr COLONEQ AssignExpr 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 134, looking ahead at PLUS, reducing production
** HExpr -> PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            IfExpr // lookahead token is inherited
            IF Expr THEN NotContinueExpr // lookahead token is inherited
                         AssignExpr // lookahead token is inherited
                         TupleExpr // lookahead token is inherited
                         OrExpr // lookahead token is inherited
                         AndExpr // lookahead token is inherited
                         CmpExpr // lookahead token is inherited
                         ConsExpr // lookahead token is inherited
                         HExpr // lookahead token is inherited
                         PMExpr . 

** In state 134, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            IfExpr 
            IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
                         AssignExpr 
                         TupleExpr COLONEQ AssignExpr 
                         OrExpr 
                         AndExpr 
                         CmpExpr 
                         PMExpr LT PMExpr 
                         PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 128.
** Token involved: COLONEQ
** This state is reached from toplevel after reading:

PMExpr PLUS IF Expr THEN TupleExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
(?)

** In state 128, looking ahead at COLONEQ, shifting is permitted
** because of the following sub-derivation:

TupleExpr COLONEQ AssignExpr 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            IfExpr 
            IF Expr THEN NotContinueExpr ELSE NotContinueExpr 
                         AssignExpr 
                         TupleExpr . COLONEQ AssignExpr 

** In state 128, looking ahead at COLONEQ, reducing production
** AssignExpr -> TupleExpr 
** is permitted because of the following sub-derivation:

TupleExpr COLONEQ AssignExpr // lookahead token appears
OrExpr // lookahead token is inherited
AndExpr // lookahead token is inherited
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            IfExpr // lookahead token is inherited
            IF Expr THEN NotContinueExpr // lookahead token is inherited
                         AssignExpr // lookahead token is inherited
                         TupleExpr . 

** Conflict (shift/reduce) in state 121.
** Tokens involved: TRUE STRINGV LPAREN LCLYBRA LBOXBRA INTV ID FALSE EXCLM CNSTR
** The following explanations concentrate on token TRUE.
** This state is reached from toplevel after reading:

CNSTR 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
TupleExpr COLONEQ AssignExpr 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
EExpr 
AppExpr EXPO EExpr 
(?)

** In state 121, looking ahead at TRUE, shifting is permitted
** because of the following sub-derivation:

FunInfixExpr 
CnstrExpr 
CNSTR CnstrExpr 
      ProjExpr 
      AExpr 
      . TRUE 

** In state 121, looking ahead at TRUE, reducing production
** CnstrExpr -> CNSTR 
** is permitted because of the following sub-derivation:

AppExpr FunInfixExpr // lookahead token appears because FunInfixExpr can begin with TRUE
FunInfixExpr // lookahead token is inherited
CnstrExpr // lookahead token is inherited
CNSTR . 

** Conflict (shift/reduce) in state 38.
** Token involved: RPAREN
** This state is reached from toplevel after reading:

LPAREN Expr COLON LPAREN FunType 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
ProjExpr DOT ID LARROW AssignExpr 
AExpr 
LPAREN Expr COLON FunType RPAREN 
                  TupleType RARROW FunType 
                  AType 
                  (?)

** In state 38, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

LPAREN FunType . RPAREN 

** In state 38, looking ahead at RPAREN, reducing production
** ListedTypeParameters -> FunType 
** is permitted because of the following sub-derivation:

TypeParameters ID 
LPAREN ListedTypeParameters RPAREN // lookahead token appears
       FunType . 

** Conflict (shift/reduce) in state 30.
** Tokens involved: RARROW MULT ID
** The following explanations concentrate on token RARROW.
** This state is reached from toplevel after reading:

LPAREN Expr COLON FunType MULT TupleType 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
ProjExpr DOT ID LARROW AssignExpr 
AExpr 
LPAREN Expr COLON FunType RPAREN 
                  (?)

** In state 30, looking ahead at RARROW, shifting is permitted
** because of the following sub-derivation:

TupleType RARROW FunType 
TupleHeadType 
FunType TupleTailType 
        MULT TupleType 
             TupleHeadType 
             FunType TupleTailType 
             TupleType . RARROW FunType 

** In state 30, looking ahead at RARROW, reducing production
** TupleTailType -> MULT TupleType 
** is permitted because of the following sub-derivation:

TupleType RARROW FunType // lookahead token appears
TupleHeadType // lookahead token is inherited
FunType TupleTailType // lookahead token is inherited
        MULT TupleType . 

** Conflict (shift/reduce) in state 28.
** Tokens involved: MULT ID
** The following explanations concentrate on token MULT.
** This state is reached from toplevel after reading:

LPAREN Expr COLON TupleType RARROW FunType 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
AssignExpr 
ProjExpr DOT ID LARROW AssignExpr 
AExpr 
LPAREN Expr COLON FunType RPAREN 
                  (?)

** In state 28, looking ahead at MULT, reducing production
** FunType -> TupleType RARROW FunType 
** is permitted because of the following sub-derivation:

TupleType RARROW FunType 
TupleHeadType 
FunType TupleTailType // lookahead token appears because TupleTailType can begin with MULT
TupleType RARROW FunType . 

** In state 28, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

TupleType RARROW FunType 
                 TupleType RARROW FunType 
                 TupleHeadType 
                 FunType TupleTailType 
                         . MULT TupleType 
