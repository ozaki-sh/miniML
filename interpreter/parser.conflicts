
** Conflict (shift/reduce) in state 211.
** Token involved: BAR
** This state is reached from toplevel after reading:

MATCH Expr list(MoreExpr) WITH option(BAR) Patterns list(MorePatterns) RARROW MATCH Expr list(MoreExpr) WITH option(BAR) Patterns list(MorePatterns) RARROW Expr MorePatternMatchExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
MatchExpr 
MATCH Expr list(MoreExpr) WITH option(BAR) PatternMatchExpr 
                                           (?)

** In state 211, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

Patterns list(MorePatterns) RARROW Expr list(MorePatternMatchExpr) 
                                   MatchExpr 
                                   MATCH Expr list(MoreExpr) WITH option(BAR) PatternMatchExpr 
                                                                              Patterns list(MorePatterns) RARROW Expr list(MorePatternMatchExpr) 
                                                                                                                      MorePatternMatchExpr list(MorePatternMatchExpr) 
                                                                                                                                           MorePatternMatchExpr list(MorePatternMatchExpr) 
                                                                                                                                           . BAR Patterns list(MorePatterns) RARROW Expr 

** In state 211, looking ahead at BAR, reducing production
** list(MorePatternMatchExpr) -> 
** is permitted because of the following sub-derivation:

Patterns list(MorePatterns) RARROW Expr list(MorePatternMatchExpr) // lookahead token appears because list(MorePatternMatchExpr) can begin with BAR
                                   MatchExpr // lookahead token is inherited
                                   MATCH Expr list(MoreExpr) WITH option(BAR) PatternMatchExpr // lookahead token is inherited
                                                                              Patterns list(MorePatterns) RARROW Expr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                                                                      MorePatternMatchExpr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                                                                                           . 

** Conflict (shift/reduce) in state 202.
** Token involved: BAR
** This state is reached from toplevel after reading:

MATCH Expr list(MoreExpr) WITH option(BAR) Patterns list(MorePatterns) RARROW MATCH Expr list(MoreExpr) WITH option(BAR) Patterns list(MorePatterns) RARROW Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
MatchExpr 
MATCH Expr list(MoreExpr) WITH option(BAR) PatternMatchExpr 
                                           (?)

** In state 202, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

Patterns list(MorePatterns) RARROW Expr list(MorePatternMatchExpr) 
                                   MatchExpr 
                                   MATCH Expr list(MoreExpr) WITH option(BAR) PatternMatchExpr 
                                                                              Patterns list(MorePatterns) RARROW Expr list(MorePatternMatchExpr) 
                                                                                                                      MorePatternMatchExpr list(MorePatternMatchExpr) 
                                                                                                                      . BAR Patterns list(MorePatterns) RARROW Expr 

** In state 202, looking ahead at BAR, reducing production
** list(MorePatternMatchExpr) -> 
** is permitted because of the following sub-derivation:

Patterns list(MorePatterns) RARROW Expr list(MorePatternMatchExpr) // lookahead token appears because list(MorePatternMatchExpr) can begin with BAR
                                   MatchExpr // lookahead token is inherited
                                   MATCH Expr list(MoreExpr) WITH option(BAR) PatternMatchExpr // lookahead token is inherited
                                                                              Patterns list(MorePatterns) RARROW Expr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                                                                      . 

** Conflict (shift/reduce) in state 184.
** Token involved: CONS
** This state is reached from toplevel after reading:

MATCH Expr list(MoreExpr) WITH option(BAR) Pattern CONS Pattern 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
MatchExpr 
MATCH Expr list(MoreExpr) WITH option(BAR) PatternMatchExpr 
                                           Patterns list(MorePatterns) RARROW Expr list(MorePatternMatchExpr) 
                                           Pattern list(MorePattern) 
                                           (?)

** In state 184, looking ahead at CONS, shifting is permitted
** because of the following sub-derivation:

Pattern CONS Pattern 
             Pattern . CONS Pattern 

** In state 184, looking ahead at CONS, reducing production
** Pattern -> Pattern CONS Pattern 
** is permitted because of the following sub-derivation:

Pattern CONS Pattern // lookahead token appears
Pattern CONS Pattern . 

** Conflict (shift/reduce) in state 110.
** Token involved: AND
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW AndExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
(?)

** In state 110, looking ahead at AND, shifting is permitted
** because of the following sub-derivation:

CmpExpr 
PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          AndExpr . AND CmpExpr 

** In state 110, looking ahead at AND, reducing production
** OrExpr -> AndExpr 
** is permitted because of the following sub-derivation:

AndExpr AND CmpExpr // lookahead token appears
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr . 

** Conflict (shift/reduce) in state 102.
** Token involved: EQ
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW AndExpr AND CmpExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
(?)

** In state 102, looking ahead at EQ, reducing production
** AndExpr -> AndExpr AND CmpExpr 
** is permitted because of the following sub-derivation:

CmpExpr EQ PMExpr // lookahead token appears
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          AndExpr AND CmpExpr . 

** In state 102, looking ahead at EQ, shifting is permitted
** because of the following sub-derivation:

PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          AndExpr AND CmpExpr 
                                                      CmpExpr . EQ PMExpr 

** Conflict (shift/reduce) in state 99.
** Token involved: AND
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW OrExpr OR AndExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
(?)

** In state 99, looking ahead at AND, shifting is permitted
** because of the following sub-derivation:

CmpExpr 
PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          OrExpr OR AndExpr 
                                                    AndExpr . AND CmpExpr 

** In state 99, looking ahead at AND, reducing production
** OrExpr -> OrExpr OR AndExpr 
** is permitted because of the following sub-derivation:

AndExpr AND CmpExpr // lookahead token appears
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          OrExpr OR AndExpr . 

** Conflict (shift/reduce) in state 97.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW CmpExpr EQ PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 97, looking ahead at PLUS, reducing production
** CmpExpr -> CmpExpr EQ PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          CmpExpr EQ PMExpr . 

** In state 97, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          CmpExpr EQ PMExpr 
                                                     PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 95.
** Token involved: EQ
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW CmpExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
(?)

** In state 95, looking ahead at EQ, reducing production
** AndExpr -> CmpExpr 
** is permitted because of the following sub-derivation:

CmpExpr EQ PMExpr // lookahead token appears
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr . 

** In state 95, looking ahead at EQ, shifting is permitted
** because of the following sub-derivation:

PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          CmpExpr . EQ PMExpr 

** Conflict (shift/reduce) in state 91.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW HExpr CONS PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 91, looking ahead at PLUS, reducing production
** HExpr -> PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          ConsExpr // lookahead token is inherited
                                          HExpr CONS ConsExpr // lookahead token is inherited
                                                     HExpr // lookahead token is inherited
                                                     PMExpr . 

** In state 91, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          ConsExpr 
                                          HExpr CONS ConsExpr 
                                                     HExpr CONS ConsExpr 
                                                     PMExpr 
                                                     PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 89.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW HExpr HAT PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 89, looking ahead at PLUS, reducing production
** HExpr -> HExpr HAT PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          ConsExpr // lookahead token is inherited
                                          HExpr // lookahead token is inherited
                                          HExpr HAT PMExpr . 

** In state 89, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          ConsExpr 
                                          HExpr CONS ConsExpr 
                                          HExpr HAT PMExpr 
                                                    PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 87.
** Tokens involved: HAT CONS
** The following explanations concentrate on token HAT.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW HExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
(?)

** In state 87, looking ahead at HAT, reducing production
** ConsExpr -> HExpr 
** is permitted because of the following sub-derivation:

ConsExpr 
HExpr CONS ConsExpr 
HExpr HAT PMExpr // lookahead token appears
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          ConsExpr // lookahead token is inherited
                                          HExpr . 

** In state 87, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          ConsExpr 
                                          HExpr CONS ConsExpr 
                                          HExpr . HAT PMExpr 

** Conflict (shift/reduce) in state 84.
** Token involved: OR
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW OrExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
(?)

** In state 84, looking ahead at OR, reducing production
** Expr -> OrExpr 
** is permitted because of the following sub-derivation:

OrExpr OR AndExpr // lookahead token appears
AndExpr // lookahead token is inherited
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr . 

** In state 84, looking ahead at OR, shifting is permitted
** because of the following sub-derivation:

AndExpr 
CmpExpr 
PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          OrExpr . OR AndExpr 

** Conflict (shift/reduce) in state 82.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW PMExpr LT PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 82, looking ahead at PLUS, reducing production
** CmpExpr -> PMExpr LT PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          PMExpr LT PMExpr . 

** In state 82, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          PMExpr LT PMExpr 
                                                    PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 79.
** Token involved: MULT
** This state is reached from toplevel after reading:

MExpr MULT FUN nonempty_list(IDt) RARROW MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
(?)

** In state 79, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

MExpr MULT LookRightExpr 
           FunExpr 
           FUN nonempty_list(IDt) RARROW Expr 
                                         OrExpr 
                                         AndExpr 
                                         CmpExpr 
                                         PMExpr LT PMExpr 
                                         MExpr 
                                         MExpr . MULT EExpr 

** In state 79, looking ahead at MULT, reducing production
** PMExpr -> MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT EExpr // lookahead token appears
MExpr MULT LookRightExpr // lookahead token is inherited
           FunExpr // lookahead token is inherited
           FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                         OrExpr // lookahead token is inherited
                                         AndExpr // lookahead token is inherited
                                         CmpExpr // lookahead token is inherited
                                         ConsExpr // lookahead token is inherited
                                         HExpr // lookahead token is inherited
                                         PMExpr // lookahead token is inherited
                                         MExpr . 

** Conflict (shift/reduce) in state 77.
** Token involved: MULT
** This state is reached from toplevel after reading:

MExpr MULT FUN nonempty_list(IDt) RARROW PMExpr MINUS MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
(?)

** In state 77, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

MExpr MULT LookRightExpr 
           FunExpr 
           FUN nonempty_list(IDt) RARROW Expr 
                                         OrExpr 
                                         AndExpr 
                                         CmpExpr 
                                         PMExpr LT PMExpr 
                                         PMExpr MINUS MExpr 
                                                      MExpr . MULT EExpr 

** In state 77, looking ahead at MULT, reducing production
** PMExpr -> PMExpr MINUS MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT EExpr // lookahead token appears
MExpr MULT LookRightExpr // lookahead token is inherited
           FunExpr // lookahead token is inherited
           FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                         OrExpr // lookahead token is inherited
                                         AndExpr // lookahead token is inherited
                                         CmpExpr // lookahead token is inherited
                                         ConsExpr // lookahead token is inherited
                                         HExpr // lookahead token is inherited
                                         PMExpr // lookahead token is inherited
                                         PMExpr MINUS MExpr . 

** Conflict (shift/reduce) in state 75.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW PMExpr MT PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 75, looking ahead at PLUS, reducing production
** CmpExpr -> PMExpr MT PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          PMExpr MT PMExpr . 

** In state 75, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          PMExpr MT PMExpr 
                                                    PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 55.
** Token involved: MULT
** This state is reached from toplevel after reading:

MExpr MULT FUN nonempty_list(IDt) RARROW PMExpr PLUS MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
(?)

** In state 55, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

MExpr MULT LookRightExpr 
           FunExpr 
           FUN nonempty_list(IDt) RARROW Expr 
                                         OrExpr 
                                         AndExpr 
                                         CmpExpr 
                                         PMExpr LT PMExpr 
                                         PMExpr PLUS MExpr 
                                                     MExpr . MULT EExpr 

** In state 55, looking ahead at MULT, reducing production
** PMExpr -> PMExpr PLUS MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT EExpr // lookahead token appears
MExpr MULT LookRightExpr // lookahead token is inherited
           FunExpr // lookahead token is inherited
           FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                         OrExpr // lookahead token is inherited
                                         AndExpr // lookahead token is inherited
                                         CmpExpr // lookahead token is inherited
                                         ConsExpr // lookahead token is inherited
                                         HExpr // lookahead token is inherited
                                         PMExpr // lookahead token is inherited
                                         PMExpr PLUS MExpr . 

** Conflict (shift/reduce) in state 52.
** Tokens involved: PLUS MT MINUS LT
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 52, looking ahead at PLUS, reducing production
** HExpr -> PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          ConsExpr // lookahead token is inherited
                                          HExpr // lookahead token is inherited
                                          PMExpr . 

** In state 52, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          PMExpr LT PMExpr 
                                          PMExpr . PLUS MExpr 
