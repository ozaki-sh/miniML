
** Conflict (shift/reduce) in state 250.
** Token involved: BAR
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern list(MorePattern) RARROW MATCH Expr WITH option(BAR) Pattern list(MorePattern) RARROW Expr MorePatternMatchExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            (?)

** In state 250, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                                 MatchExpr 
                                 MATCH Expr WITH option(BAR) PatternMatchExpr 
                                                             Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                                                                                                   MorePatternMatchExpr list(MorePatternMatchExpr) 
                                                                                                                        MorePatternMatchExpr list(MorePatternMatchExpr) 
                                                                                                                        . BAR Pattern list(MorePattern) RARROW Expr 

** In state 250, looking ahead at BAR, reducing production
** list(MorePatternMatchExpr) -> 
** is permitted because of the following sub-derivation:

Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token appears because list(MorePatternMatchExpr) can begin with BAR
                                 MatchExpr // lookahead token is inherited
                                 MATCH Expr WITH option(BAR) PatternMatchExpr // lookahead token is inherited
                                                             Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                                                   MorePatternMatchExpr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                                                                        . 

** Conflict (shift/reduce) in state 246.
** Token involved: COMMA
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern list(MorePattern) RARROW Expr BAR Pattern list(MorePattern) RARROW Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 246, looking ahead at COMMA, reducing production
** MorePatternMatchExpr -> BAR Pattern list(MorePattern) RARROW Expr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr COMMA TupleTailExpr // lookahead token appears
MatchExpr // lookahead token is inherited
MATCH Expr WITH option(BAR) PatternMatchExpr // lookahead token is inherited
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                  MorePatternMatchExpr list(MorePatternMatchExpr) // lookahead token is inherited because list(MorePatternMatchExpr) can vanish
                                                                  BAR Pattern list(MorePattern) RARROW Expr . 

** In state 246, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                                                                  MorePatternMatchExpr list(MorePatternMatchExpr) 
                                                                  BAR Pattern list(MorePattern) RARROW Expr 
                                                                                                       TupleHeadExpr 
                                                                                                       Expr . COMMA TupleTailExpr 

** Conflict (shift/reduce) in state 241.
** Tokens involved: COMMA BAR
** The following explanations concentrate on token COMMA.
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern list(MorePattern) RARROW Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 241, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                                                             TupleHeadExpr 
                                                             Expr . COMMA TupleTailExpr 

** In state 241, looking ahead at COMMA, reducing production
** list(MorePatternMatchExpr) -> 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr COMMA TupleTailExpr // lookahead token appears
MatchExpr // lookahead token is inherited
MATCH Expr WITH option(BAR) PatternMatchExpr // lookahead token is inherited
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                  . 

** Conflict (reduce/reduce) in state 226.
** Tokens involved: RPAREN RBOXBRA RARROW CONS COMMA COLON BAR
** The following explanations concentrate on token RARROW.
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern COMMA Pattern COMMA TupleTailPattern 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token appears because list(MorePattern) can vanish
                            TupleHeadPattern // lookahead token is inherited
                            Pattern COMMA TupleTailPattern // lookahead token is inherited
                                          (?)

** In state 226, looking ahead at RARROW, reducing production
** TupleHeadPattern -> Pattern COMMA TupleTailPattern 
** is permitted because of the following sub-derivation:

Pattern // lookahead token is inherited
TupleHeadPattern // lookahead token is inherited
Pattern COMMA TupleTailPattern . 

** In state 226, looking ahead at RARROW, reducing production
** TupleTailPattern -> Pattern COMMA TupleTailPattern 
** is permitted because of the following sub-derivation:

Pattern COMMA TupleTailPattern . 

** Conflict (shift/reduce) in state 224.
** Tokens involved: CONS COMMA
** The following explanations concentrate on token CONS.
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern COMMA Pattern 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                            (?)

** In state 224, looking ahead at CONS, shifting is permitted
** because of the following sub-derivation:

TupleHeadPattern 
Pattern COMMA TupleTailPattern 
              Pattern 
              Pattern . CONS Pattern 

** In state 224, looking ahead at CONS, reducing production
** TupleTailPattern -> Pattern 
** is permitted because of the following sub-derivation:

Pattern CONS Pattern // lookahead token appears
TupleHeadPattern // lookahead token is inherited
Pattern COMMA TupleTailPattern // lookahead token is inherited
              Pattern . 

** Conflict (shift/reduce) in state 221.
** Tokens involved: CONS COMMA
** The following explanations concentrate on token CONS.
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern CONS Pattern 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                            (?)

** In state 221, looking ahead at CONS, shifting is permitted
** because of the following sub-derivation:

Pattern CONS Pattern 
             Pattern . CONS Pattern 

** In state 221, looking ahead at CONS, reducing production
** Pattern -> Pattern CONS Pattern 
** is permitted because of the following sub-derivation:

Pattern CONS Pattern // lookahead token appears
Pattern CONS Pattern . 

** Conflict (shift/reduce) in state 219.
** Tokens involved: CONS COMMA
** The following explanations concentrate on token CONS.
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) CNSTR Pattern 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                            (?)

** In state 219, looking ahead at CONS, reducing production
** APattern -> CNSTR Pattern 
** is permitted because of the following sub-derivation:

Pattern CONS Pattern // lookahead token appears
APattern // lookahead token is inherited
CNSTR Pattern . 

** In state 219, looking ahead at CONS, shifting is permitted
** because of the following sub-derivation:

APattern 
CNSTR Pattern 
      Pattern . CONS Pattern 

** Conflict (shift/reduce) in state 197.
** Token involved: COMMA
** This state is reached from toplevel after reading:

LET ID LetFunExpr IN Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 197, looking ahead at COMMA, reducing production
** LetAndExpr -> ID LetFunExpr IN Expr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr COMMA TupleTailExpr // lookahead token appears
LetExpr // lookahead token is inherited
LET LetAndExpr // lookahead token is inherited
    ID LetFunExpr IN Expr . 

** In state 197, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LetExpr 
LET LetAndExpr 
    ID LetFunExpr IN Expr 
                     TupleHeadExpr 
                     Expr . COMMA TupleTailExpr 

** Conflict (shift/reduce) in state 195.
** Token involved: COMMA
** This state is reached from toplevel after reading:

LET IDt EQ Expr IN Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 195, looking ahead at COMMA, reducing production
** LetAndExpr -> IDt EQ Expr IN Expr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr COMMA TupleTailExpr // lookahead token appears
LetExpr // lookahead token is inherited
LET LetAndExpr // lookahead token is inherited
    IDt EQ Expr IN Expr . 

** In state 195, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LetExpr 
LET LetAndExpr 
    IDt EQ Expr IN Expr 
                   TupleHeadExpr 
                   Expr . COMMA TupleTailExpr 

** Conflict (shift/reduce) in state 183.
** Token involved: COMMA
** This state is reached from toplevel after reading:

LET REC ID LetFunExpr IN Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 183, looking ahead at COMMA, reducing production
** LetRecAndExpr -> ID LetFunExpr IN Expr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr COMMA TupleTailExpr // lookahead token appears
LetRecExpr // lookahead token is inherited
LET REC LetRecAndExpr // lookahead token is inherited
        ID LetFunExpr IN Expr . 

** In state 183, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LetRecExpr 
LET REC LetRecAndExpr 
        ID LetFunExpr IN Expr 
                         TupleHeadExpr 
                         Expr . COMMA TupleTailExpr 

** Conflict (shift/reduce) in state 181.
** Token involved: COMMA
** This state is reached from toplevel after reading:

LET REC IDt EQ FunExpr IN Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 181, looking ahead at COMMA, reducing production
** LetRecAndExpr -> IDt EQ FunExpr IN Expr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr COMMA TupleTailExpr // lookahead token appears
LetRecExpr // lookahead token is inherited
LET REC LetRecAndExpr // lookahead token is inherited
        IDt EQ FunExpr IN Expr . 

** In state 181, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LetRecExpr 
LET REC LetRecAndExpr 
        IDt EQ FunExpr IN Expr 
                          TupleHeadExpr 
                          Expr . COMMA TupleTailExpr 

** Conflict (shift/reduce) in state 164.
** Token involved: SEMI
** This state is reached from toplevel after reading:

LBOXBRA Expr SEMI Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
EExpr 
AppExpr EXPO EExpr 
FunInfixExpr 
CnstrExpr 
AExpr 
ListHeadExpr 
LBOXBRA Expr ListTailExpr 
             (?)

** In state 164, looking ahead at SEMI, reducing production
** option(SEMI) -> 
** is permitted because of the following sub-derivation:

SEMI Expr option(SEMI) ListTailExpr // lookahead token appears because ListTailExpr can begin with SEMI
          . 

** In state 164, looking ahead at SEMI, shifting is permitted
** because of the following sub-derivation:

SEMI Expr option(SEMI) ListTailExpr 
          . SEMI 

** Conflict (shift/reduce) in state 161.
** Token involved: COMMA
** This state is reached from toplevel after reading:

IF Expr THEN Expr ELSE Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 161, looking ahead at COMMA, reducing production
** IfExpr -> IF Expr THEN Expr ELSE Expr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr COMMA TupleTailExpr // lookahead token appears
IfExpr // lookahead token is inherited
IF Expr THEN Expr ELSE Expr . 

** In state 161, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

IfExpr 
IF Expr THEN Expr ELSE Expr 
                       TupleHeadExpr 
                       Expr . COMMA TupleTailExpr 

** Conflict (shift/reduce) in state 156.
** Token involved: COMMA
** This state is reached from toplevel after reading:

FUN nonempty_list(IDt) RARROW Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 156, looking ahead at COMMA, reducing production
** FunExpr -> FUN nonempty_list(IDt) RARROW Expr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr COMMA TupleTailExpr // lookahead token appears
FunExpr // lookahead token is inherited
FUN nonempty_list(IDt) RARROW Expr . 

** In state 156, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

FunExpr 
FUN nonempty_list(IDt) RARROW Expr 
                              TupleHeadExpr 
                              Expr . COMMA TupleTailExpr 

** Conflict (shift/reduce) in state 153.
** Token involved: COMMA
** This state is reached from toplevel after reading:

DFUN nonempty_list(IDt) RARROW Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 153, looking ahead at COMMA, reducing production
** DFunExpr -> DFUN nonempty_list(IDt) RARROW Expr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr COMMA TupleTailExpr // lookahead token appears
DFunExpr // lookahead token is inherited
DFUN nonempty_list(IDt) RARROW Expr . 

** In state 153, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

DFunExpr 
DFUN nonempty_list(IDt) RARROW Expr 
                               TupleHeadExpr 
                               Expr . COMMA TupleTailExpr 

** Conflict (shift/reduce) in state 148.
** Token involved: AND
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW AndExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
(?)

** In state 148, looking ahead at AND, shifting is permitted
** because of the following sub-derivation:

CmpExpr 
PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          AndExpr . AND CmpExpr 

** In state 148, looking ahead at AND, reducing production
** OrExpr -> AndExpr 
** is permitted because of the following sub-derivation:

AndExpr AND CmpExpr // lookahead token appears
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr . 

** Conflict (reduce/reduce) in state 146.
** Tokens involved: WITH THEN SEMISEMI SEMI RPAREN RBOXBRA PLUS OR MULT MT MINUS METAAND LT LET IN HAT EQ ELSE CONS COMMA COLON BAR AND
** The following explanations concentrate on token SEMISEMI.
** This state is reached from toplevel after reading:

Expr COMMA Expr COMMA TupleTailExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI // lookahead token appears
TupleHeadExpr // lookahead token is inherited
Expr COMMA TupleTailExpr // lookahead token is inherited
           (?)

** In state 146, looking ahead at SEMISEMI, reducing production
** TupleHeadExpr -> Expr COMMA TupleTailExpr 
** is permitted because of the following sub-derivation:

Expr // lookahead token is inherited
TupleHeadExpr // lookahead token is inherited
Expr COMMA TupleTailExpr . 

** In state 146, looking ahead at SEMISEMI, reducing production
** TupleTailExpr -> Expr COMMA TupleTailExpr 
** is permitted because of the following sub-derivation:

Expr COMMA TupleTailExpr . 

** Conflict (shift/reduce) in state 144.
** Token involved: COMMA
** This state is reached from toplevel after reading:

Expr COMMA Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
TupleHeadExpr 
(?)

** In state 144, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

Expr COMMA TupleTailExpr 
           Expr 
           TupleHeadExpr 
           Expr . COMMA TupleTailExpr 

** In state 144, looking ahead at COMMA, reducing production
** TupleTailExpr -> Expr 
** is permitted because of the following sub-derivation:

Expr COMMA TupleTailExpr // lookahead token appears
TupleHeadExpr // lookahead token is inherited
Expr COMMA TupleTailExpr // lookahead token is inherited
           Expr . 

** Conflict (shift/reduce) in state 134.
** Token involved: EQ
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW AndExpr AND CmpExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
(?)

** In state 134, looking ahead at EQ, reducing production
** AndExpr -> AndExpr AND CmpExpr 
** is permitted because of the following sub-derivation:

CmpExpr EQ PMExpr // lookahead token appears
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          AndExpr AND CmpExpr . 

** In state 134, looking ahead at EQ, shifting is permitted
** because of the following sub-derivation:

PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          AndExpr AND CmpExpr 
                                                      CmpExpr . EQ PMExpr 

** Conflict (shift/reduce) in state 131.
** Token involved: AND
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW OrExpr OR AndExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
(?)

** In state 131, looking ahead at AND, shifting is permitted
** because of the following sub-derivation:

CmpExpr 
PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          OrExpr OR AndExpr 
                                                    AndExpr . AND CmpExpr 

** In state 131, looking ahead at AND, reducing production
** OrExpr -> OrExpr OR AndExpr 
** is permitted because of the following sub-derivation:

AndExpr AND CmpExpr // lookahead token appears
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          OrExpr OR AndExpr . 

** Conflict (shift/reduce) in state 129.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW CmpExpr EQ PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 129, looking ahead at PLUS, reducing production
** CmpExpr -> CmpExpr EQ PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          CmpExpr EQ PMExpr . 

** In state 129, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          CmpExpr EQ PMExpr 
                                                     PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 127.
** Token involved: EQ
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW CmpExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
(?)

** In state 127, looking ahead at EQ, reducing production
** AndExpr -> CmpExpr 
** is permitted because of the following sub-derivation:

CmpExpr EQ PMExpr // lookahead token appears
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr . 

** In state 127, looking ahead at EQ, shifting is permitted
** because of the following sub-derivation:

PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          CmpExpr . EQ PMExpr 

** Conflict (shift/reduce) in state 123.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW HExpr CONS PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 123, looking ahead at PLUS, reducing production
** HExpr -> PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          ConsExpr // lookahead token is inherited
                                          HExpr CONS ConsExpr // lookahead token is inherited
                                                     HExpr // lookahead token is inherited
                                                     PMExpr . 

** In state 123, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          ConsExpr 
                                          HExpr CONS ConsExpr 
                                                     HExpr CONS ConsExpr 
                                                     PMExpr 
                                                     PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 121.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW HExpr HAT PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 121, looking ahead at PLUS, reducing production
** HExpr -> HExpr HAT PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          ConsExpr // lookahead token is inherited
                                          HExpr // lookahead token is inherited
                                          HExpr HAT PMExpr . 

** In state 121, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          ConsExpr 
                                          HExpr CONS ConsExpr 
                                          HExpr HAT PMExpr 
                                                    PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 119.
** Tokens involved: HAT CONS
** The following explanations concentrate on token HAT.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW HExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
(?)

** In state 119, looking ahead at HAT, reducing production
** ConsExpr -> HExpr 
** is permitted because of the following sub-derivation:

ConsExpr 
HExpr CONS ConsExpr 
HExpr HAT PMExpr // lookahead token appears
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          ConsExpr // lookahead token is inherited
                                          HExpr . 

** In state 119, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          ConsExpr 
                                          HExpr CONS ConsExpr 
                                          HExpr . HAT PMExpr 

** Conflict (shift/reduce) in state 116.
** Token involved: OR
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW OrExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
(?)

** In state 116, looking ahead at OR, reducing production
** Expr -> OrExpr 
** is permitted because of the following sub-derivation:

OrExpr OR AndExpr // lookahead token appears
AndExpr // lookahead token is inherited
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr . 

** In state 116, looking ahead at OR, shifting is permitted
** because of the following sub-derivation:

AndExpr 
CmpExpr 
PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          OrExpr . OR AndExpr 

** Conflict (shift/reduce) in state 114.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW PMExpr LT PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 114, looking ahead at PLUS, reducing production
** CmpExpr -> PMExpr LT PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          PMExpr LT PMExpr . 

** In state 114, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          PMExpr LT PMExpr 
                                                    PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 111.
** Token involved: MULT
** This state is reached from toplevel after reading:

MExpr MULT FUN nonempty_list(IDt) RARROW MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
(?)

** In state 111, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

MExpr MULT LookRightExpr 
           FunExpr 
           FUN nonempty_list(IDt) RARROW Expr 
                                         OrExpr 
                                         AndExpr 
                                         CmpExpr 
                                         PMExpr LT PMExpr 
                                         MExpr 
                                         MExpr . MULT EExpr 

** In state 111, looking ahead at MULT, reducing production
** PMExpr -> MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT EExpr // lookahead token appears
MExpr MULT LookRightExpr // lookahead token is inherited
           FunExpr // lookahead token is inherited
           FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                         OrExpr // lookahead token is inherited
                                         AndExpr // lookahead token is inherited
                                         CmpExpr // lookahead token is inherited
                                         ConsExpr // lookahead token is inherited
                                         HExpr // lookahead token is inherited
                                         PMExpr // lookahead token is inherited
                                         MExpr . 

** Conflict (shift/reduce) in state 109.
** Token involved: MULT
** This state is reached from toplevel after reading:

MExpr MULT FUN nonempty_list(IDt) RARROW PMExpr MINUS MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
(?)

** In state 109, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

MExpr MULT LookRightExpr 
           FunExpr 
           FUN nonempty_list(IDt) RARROW Expr 
                                         OrExpr 
                                         AndExpr 
                                         CmpExpr 
                                         PMExpr LT PMExpr 
                                         PMExpr MINUS MExpr 
                                                      MExpr . MULT EExpr 

** In state 109, looking ahead at MULT, reducing production
** PMExpr -> PMExpr MINUS MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT EExpr // lookahead token appears
MExpr MULT LookRightExpr // lookahead token is inherited
           FunExpr // lookahead token is inherited
           FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                         OrExpr // lookahead token is inherited
                                         AndExpr // lookahead token is inherited
                                         CmpExpr // lookahead token is inherited
                                         ConsExpr // lookahead token is inherited
                                         HExpr // lookahead token is inherited
                                         PMExpr // lookahead token is inherited
                                         PMExpr MINUS MExpr . 

** Conflict (shift/reduce) in state 107.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW PMExpr MT PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 107, looking ahead at PLUS, reducing production
** CmpExpr -> PMExpr MT PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          PMExpr MT PMExpr . 

** In state 107, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          PMExpr MT PMExpr 
                                                    PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 86.
** Token involved: MULT
** This state is reached from toplevel after reading:

MExpr MULT FUN nonempty_list(IDt) RARROW PMExpr PLUS MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
(?)

** In state 86, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

MExpr MULT LookRightExpr 
           FunExpr 
           FUN nonempty_list(IDt) RARROW Expr 
                                         OrExpr 
                                         AndExpr 
                                         CmpExpr 
                                         PMExpr LT PMExpr 
                                         PMExpr PLUS MExpr 
                                                     MExpr . MULT EExpr 

** In state 86, looking ahead at MULT, reducing production
** PMExpr -> PMExpr PLUS MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT EExpr // lookahead token appears
MExpr MULT LookRightExpr // lookahead token is inherited
           FunExpr // lookahead token is inherited
           FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                         OrExpr // lookahead token is inherited
                                         AndExpr // lookahead token is inherited
                                         CmpExpr // lookahead token is inherited
                                         ConsExpr // lookahead token is inherited
                                         HExpr // lookahead token is inherited
                                         PMExpr // lookahead token is inherited
                                         PMExpr PLUS MExpr . 

** Conflict (shift/reduce) in state 83.
** Tokens involved: PLUS MT MINUS LT
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 83, looking ahead at PLUS, reducing production
** HExpr -> PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          ConsExpr // lookahead token is inherited
                                          HExpr // lookahead token is inherited
                                          PMExpr . 

** In state 83, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          PMExpr LT PMExpr 
                                          PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 80.
** Tokens involved: TRUE STRINGV LPAREN LBOXBRA INTV ID FALSE CNSTR
** The following explanations concentrate on token TRUE.
** This state is reached from toplevel after reading:

CNSTR 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
EExpr 
AppExpr EXPO EExpr 
(?)

** In state 80, looking ahead at TRUE, shifting is permitted
** because of the following sub-derivation:

FunInfixExpr 
CnstrExpr 
CNSTR CnstrExpr 
      AExpr 
      . TRUE 

** In state 80, looking ahead at TRUE, reducing production
** CnstrExpr -> CNSTR 
** is permitted because of the following sub-derivation:

AppExpr FunInfixExpr // lookahead token appears because FunInfixExpr can begin with TRUE
FunInfixExpr // lookahead token is inherited
CnstrExpr // lookahead token is inherited
CNSTR . 

** Conflict (reduce/reduce) in state 19.
** Tokens involved: TYPE SEMISEMI RPAREN MULT METAAND EQ BAR
** The following explanations concentrate on token RPAREN.
** This state is reached from toplevel after reading:

LPAREN Expr COLON TupleType MULT TupleType MULT TupleTailType 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
EExpr 
AppExpr EXPO EExpr 
FunInfixExpr 
CnstrExpr 
AExpr 
LPAREN Expr COLON TupleType RPAREN // lookahead token appears
                  TupleHeadType // lookahead token is inherited
                  TupleType MULT TupleTailType // lookahead token is inherited
                                 (?)

** In state 19, looking ahead at RPAREN, reducing production
** TupleHeadType -> TupleType MULT TupleTailType 
** is permitted because of the following sub-derivation:

TupleType // lookahead token is inherited
TupleHeadType // lookahead token is inherited
TupleType MULT TupleTailType . 

** In state 19, looking ahead at RPAREN, reducing production
** TupleTailType -> TupleType MULT TupleTailType 
** is permitted because of the following sub-derivation:

TupleType MULT TupleTailType . 

** Conflict (shift/reduce) in state 17.
** Token involved: MULT
** This state is reached from toplevel after reading:

LPAREN Expr COLON TupleType MULT TupleType 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
EExpr 
AppExpr EXPO EExpr 
FunInfixExpr 
CnstrExpr 
AExpr 
LPAREN Expr COLON TupleType RPAREN 
                  TupleHeadType 
                  (?)

** In state 17, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

TupleType MULT TupleTailType 
               TupleType 
               TupleHeadType 
               TupleType . MULT TupleTailType 

** In state 17, looking ahead at MULT, reducing production
** TupleTailType -> TupleType 
** is permitted because of the following sub-derivation:

TupleType MULT TupleTailType // lookahead token appears
TupleHeadType // lookahead token is inherited
TupleType MULT TupleTailType // lookahead token is inherited
               TupleType . 
