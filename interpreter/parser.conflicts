
** Conflict (shift/reduce) in state 338.
** Token involved: BAR
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern list(MorePattern) RARROW MATCH Expr WITH option(BAR) Pattern list(MorePattern) RARROW Expr MorePatternMatchExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            (?)

** In state 338, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                                 MatchExpr 
                                 MATCH Expr WITH option(BAR) PatternMatchExpr 
                                                             Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                                                                                                   MorePatternMatchExpr list(MorePatternMatchExpr) 
                                                                                                                        MorePatternMatchExpr list(MorePatternMatchExpr) 
                                                                                                                        . BAR Pattern list(MorePattern) RARROW Expr 

** In state 338, looking ahead at BAR, reducing production
** list(MorePatternMatchExpr) -> 
** is permitted because of the following sub-derivation:

Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token appears because list(MorePatternMatchExpr) can begin with BAR
                                 MatchExpr // lookahead token is inherited
                                 MATCH Expr WITH option(BAR) PatternMatchExpr // lookahead token is inherited
                                                             Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                                                   MorePatternMatchExpr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                                                                        . 

** Conflict (shift/reduce) in state 334.
** Tokens involved: DOT COMMA
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern list(MorePattern) RARROW Expr BAR Pattern list(MorePattern) RARROW Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 334, looking ahead at DOT, reducing production
** MorePatternMatchExpr -> BAR Pattern list(MorePattern) RARROW Expr 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
MatchExpr // lookahead token is inherited
MATCH Expr WITH option(BAR) PatternMatchExpr // lookahead token is inherited
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                  MorePatternMatchExpr list(MorePatternMatchExpr) // lookahead token is inherited because list(MorePatternMatchExpr) can vanish
                                                                  BAR Pattern list(MorePattern) RARROW Expr . 

** In state 334, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                                                                  MorePatternMatchExpr list(MorePatternMatchExpr) 
                                                                  BAR Pattern list(MorePattern) RARROW Expr 
                                                                                                       RcdAssignExpr 
                                                                                                       Expr . DOT ID LARROW RcdAssignExpr 

** Conflict (shift/reduce) in state 329.
** Tokens involved: DOT COMMA BAR
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern list(MorePattern) RARROW Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 329, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                                                             RcdAssignExpr 
                                                             Expr . DOT ID LARROW RcdAssignExpr 

** In state 329, looking ahead at DOT, reducing production
** list(MorePatternMatchExpr) -> 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
MatchExpr // lookahead token is inherited
MATCH Expr WITH option(BAR) PatternMatchExpr // lookahead token is inherited
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                  . 

** Conflict (shift/reduce) in state 299.
** Token involved: COMMA
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern COMMA ConsPattern 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                            TuplePattern 
                            TupleHeadPattern 
                            (?)

** In state 299, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

Pattern TupleTailPattern 
        COMMA ConsPattern TupleTailPattern 
                          . COMMA ConsPattern 

** In state 299, looking ahead at COMMA, reducing production
** TupleTailPattern -> COMMA ConsPattern 
** is permitted because of the following sub-derivation:

Pattern TupleTailPattern // lookahead token appears because TupleTailPattern can begin with COMMA
TuplePattern // lookahead token is inherited
TupleHeadPattern // lookahead token is inherited
Pattern TupleTailPattern // lookahead token is inherited
        COMMA ConsPattern . 

** Conflict (shift/reduce) in state 264.
** Tokens involved: DOT COMMA
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

LET ID LetFunExpr IN Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 264, looking ahead at DOT, reducing production
** LetAndExpr -> ID LetFunExpr IN Expr 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
LetExpr // lookahead token is inherited
LET LetAndExpr // lookahead token is inherited
    ID LetFunExpr IN Expr . 

** In state 264, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

LetExpr 
LET LetAndExpr 
    ID LetFunExpr IN Expr 
                     RcdAssignExpr 
                     Expr . DOT ID LARROW RcdAssignExpr 

** Conflict (shift/reduce) in state 262.
** Tokens involved: DOT COMMA
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

LET IDt EQ Expr IN Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 262, looking ahead at DOT, reducing production
** LetAndExpr -> IDt EQ Expr IN Expr 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
LetExpr // lookahead token is inherited
LET LetAndExpr // lookahead token is inherited
    IDt EQ Expr IN Expr . 

** In state 262, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

LetExpr 
LET LetAndExpr 
    IDt EQ Expr IN Expr 
                   RcdAssignExpr 
                   Expr . DOT ID LARROW RcdAssignExpr 

** Conflict (shift/reduce) in state 250.
** Tokens involved: DOT COMMA
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

LET REC ID LetFunExpr IN Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 250, looking ahead at DOT, reducing production
** LetRecAndExpr -> ID LetFunExpr IN Expr 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
LetRecExpr // lookahead token is inherited
LET REC LetRecAndExpr // lookahead token is inherited
        ID LetFunExpr IN Expr . 

** In state 250, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

LetRecExpr 
LET REC LetRecAndExpr 
        ID LetFunExpr IN Expr 
                         RcdAssignExpr 
                         Expr . DOT ID LARROW RcdAssignExpr 

** Conflict (shift/reduce) in state 248.
** Tokens involved: DOT COMMA
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

LET REC IDt EQ FunExpr IN Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 248, looking ahead at DOT, reducing production
** LetRecAndExpr -> IDt EQ FunExpr IN Expr 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
LetRecExpr // lookahead token is inherited
LET REC LetRecAndExpr // lookahead token is inherited
        IDt EQ FunExpr IN Expr . 

** In state 248, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

LetRecExpr 
LET REC LetRecAndExpr 
        IDt EQ FunExpr IN Expr 
                          RcdAssignExpr 
                          Expr . DOT ID LARROW RcdAssignExpr 

** Conflict (shift/reduce) in state 209.
** Tokens involved: DOT COMMA
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

IF Expr THEN Expr ELSE Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 209, looking ahead at DOT, reducing production
** IfExpr -> IF Expr THEN Expr ELSE Expr 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
IfExpr // lookahead token is inherited
IF Expr THEN Expr ELSE Expr . 

** In state 209, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

IfExpr 
IF Expr THEN Expr ELSE Expr 
                       RcdAssignExpr 
                       Expr . DOT ID LARROW RcdAssignExpr 

** Conflict (shift/reduce) in state 204.
** Tokens involved: DOT COMMA
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

FUN nonempty_list(IDt) RARROW Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 204, looking ahead at DOT, reducing production
** FunExpr -> FUN nonempty_list(IDt) RARROW Expr 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
FunExpr // lookahead token is inherited
FUN nonempty_list(IDt) RARROW Expr . 

** In state 204, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

FunExpr 
FUN nonempty_list(IDt) RARROW Expr 
                              RcdAssignExpr 
                              Expr . DOT ID LARROW RcdAssignExpr 

** Conflict (shift/reduce) in state 199.
** Token involved: AND
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW AndExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
(?)

** In state 199, looking ahead at AND, shifting is permitted
** because of the following sub-derivation:

CmpExpr 
PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          AndExpr . AND CmpExpr 

** In state 199, looking ahead at AND, reducing production
** OrExpr -> AndExpr 
** is permitted because of the following sub-derivation:

AndExpr AND CmpExpr // lookahead token appears
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr . 

** Conflict (reduce/reduce) in state 198.
** Tokens involved: DOT COMMA
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

Expr COMMA DFunExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 198, looking ahead at DOT, reducing production
** Expr -> DFunExpr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr TupleTailExpr 
     COMMA NotTupleExpr 
           RcdAssignExpr 
           Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
           DFunExpr . 

** In state 198, looking ahead at DOT, reducing production
** NotTupleExpr -> DFunExpr 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
TupleHeadExpr // lookahead token is inherited
Expr TupleTailExpr // lookahead token is inherited
     COMMA NotTupleExpr // lookahead token is inherited
           DFunExpr . 

** Conflict (reduce/reduce) in state 197.
** Tokens involved: DOT COMMA
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

Expr COMMA FunExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 197, looking ahead at DOT, reducing production
** Expr -> FunExpr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr TupleTailExpr 
     COMMA NotTupleExpr 
           RcdAssignExpr 
           Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
           FunExpr . 

** In state 197, looking ahead at DOT, reducing production
** NotTupleExpr -> FunExpr 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
TupleHeadExpr // lookahead token is inherited
Expr TupleTailExpr // lookahead token is inherited
     COMMA NotTupleExpr // lookahead token is inherited
           FunExpr . 

** Conflict (reduce/reduce) in state 196.
** Tokens involved: DOT COMMA
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

Expr COMMA IfExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 196, looking ahead at DOT, reducing production
** Expr -> IfExpr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr TupleTailExpr 
     COMMA NotTupleExpr 
           RcdAssignExpr 
           Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
           IfExpr . 

** In state 196, looking ahead at DOT, reducing production
** NotTupleExpr -> IfExpr 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
TupleHeadExpr // lookahead token is inherited
Expr TupleTailExpr // lookahead token is inherited
     COMMA NotTupleExpr // lookahead token is inherited
           IfExpr . 

** Conflict (reduce/reduce) in state 195.
** Tokens involved: DOT COMMA
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

Expr COMMA LetExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 195, looking ahead at DOT, reducing production
** Expr -> LetExpr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr TupleTailExpr 
     COMMA NotTupleExpr 
           RcdAssignExpr 
           Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
           LetExpr . 

** In state 195, looking ahead at DOT, reducing production
** NotTupleExpr -> LetExpr 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
TupleHeadExpr // lookahead token is inherited
Expr TupleTailExpr // lookahead token is inherited
     COMMA NotTupleExpr // lookahead token is inherited
           LetExpr . 

** Conflict (reduce/reduce) in state 194.
** Tokens involved: DOT COMMA
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

Expr COMMA LetRecExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 194, looking ahead at DOT, reducing production
** Expr -> LetRecExpr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr TupleTailExpr 
     COMMA NotTupleExpr 
           RcdAssignExpr 
           Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
           LetRecExpr . 

** In state 194, looking ahead at DOT, reducing production
** NotTupleExpr -> LetRecExpr 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
TupleHeadExpr // lookahead token is inherited
Expr TupleTailExpr // lookahead token is inherited
     COMMA NotTupleExpr // lookahead token is inherited
           LetRecExpr . 

** Conflict (reduce/reduce) in state 193.
** Tokens involved: DOT COMMA
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

Expr COMMA MatchExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 193, looking ahead at DOT, reducing production
** Expr -> MatchExpr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr TupleTailExpr 
     COMMA NotTupleExpr 
           RcdAssignExpr 
           Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
           MatchExpr . 

** In state 193, looking ahead at DOT, reducing production
** NotTupleExpr -> MatchExpr 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
TupleHeadExpr // lookahead token is inherited
Expr TupleTailExpr // lookahead token is inherited
     COMMA NotTupleExpr // lookahead token is inherited
           MatchExpr . 

** Conflict (shift/reduce) in state 191.
** Token involved: COMMA
** This state is reached from toplevel after reading:

Expr COMMA NotTupleExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
TupleHeadExpr 
(?)

** In state 191, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

Expr TupleTailExpr 
     COMMA NotTupleExpr TupleTailExpr 
                        . COMMA NotTupleExpr 

** In state 191, looking ahead at COMMA, reducing production
** TupleTailExpr -> COMMA NotTupleExpr 
** is permitted because of the following sub-derivation:

Expr TupleTailExpr // lookahead token appears because TupleTailExpr can begin with COMMA
TupleHeadExpr // lookahead token is inherited
Expr TupleTailExpr // lookahead token is inherited
     COMMA NotTupleExpr . 

** Conflict (reduce/reduce) in state 190.
** Tokens involved: OR DOT COMMA
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

Expr COMMA OrExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 190, looking ahead at DOT, reducing production
** Expr -> OrExpr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr TupleTailExpr 
     COMMA NotTupleExpr 
           RcdAssignExpr 
           Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
           OrExpr . 

** In state 190, looking ahead at DOT, reducing production
** NotTupleExpr -> OrExpr 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
TupleHeadExpr // lookahead token is inherited
Expr TupleTailExpr // lookahead token is inherited
     COMMA NotTupleExpr // lookahead token is inherited
           OrExpr . 

** Conflict (reduce/reduce) in state 189.
** Tokens involved: DOT COMMA
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

Expr COMMA RcdAssignExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 189, looking ahead at DOT, reducing production
** Expr -> RcdAssignExpr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr TupleTailExpr 
     COMMA NotTupleExpr 
           RcdAssignExpr 
           Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
           RcdAssignExpr . 

** In state 189, looking ahead at DOT, reducing production
** NotTupleExpr -> RcdAssignExpr 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
TupleHeadExpr // lookahead token is inherited
Expr TupleTailExpr // lookahead token is inherited
     COMMA NotTupleExpr // lookahead token is inherited
           RcdAssignExpr . 

** Conflict (reduce/reduce) in state 186.
** Tokens involved: DOT COMMA
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

Expr DOT ID LARROW RcdAssignExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
RcdAssignExpr 
(?)

** In state 186, looking ahead at DOT, reducing production
** Expr -> RcdAssignExpr 
** is permitted because of the following sub-derivation:

Expr DOT ID LARROW RcdAssignExpr 
                   Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
                   RcdAssignExpr . 

** In state 186, looking ahead at DOT, reducing production
** RcdAssignExpr -> Expr DOT ID LARROW RcdAssignExpr 
** is permitted because of the following sub-derivation:

Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
RcdAssignExpr // lookahead token is inherited
Expr DOT ID LARROW RcdAssignExpr . 

** Conflict (shift/reduce) in state 182.
** Tokens involved: DOT COMMA
** The following explanations concentrate on token DOT.
** This state is reached from toplevel after reading:

DFUN nonempty_list(IDt) RARROW Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 182, looking ahead at DOT, reducing production
** DFunExpr -> DFUN nonempty_list(IDt) RARROW Expr 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
DFunExpr // lookahead token is inherited
DFUN nonempty_list(IDt) RARROW Expr . 

** In state 182, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

DFunExpr 
DFUN nonempty_list(IDt) RARROW Expr 
                               RcdAssignExpr 
                               Expr . DOT ID LARROW RcdAssignExpr 

** Conflict (shift/reduce) in state 176.
** Token involved: EQ
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW AndExpr AND CmpExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
(?)

** In state 176, looking ahead at EQ, reducing production
** AndExpr -> AndExpr AND CmpExpr 
** is permitted because of the following sub-derivation:

CmpExpr EQ PMExpr // lookahead token appears
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          AndExpr AND CmpExpr . 

** In state 176, looking ahead at EQ, shifting is permitted
** because of the following sub-derivation:

PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          AndExpr AND CmpExpr 
                                                      CmpExpr . EQ PMExpr 

** Conflict (shift/reduce) in state 173.
** Token involved: AND
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW OrExpr OR AndExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
(?)

** In state 173, looking ahead at AND, shifting is permitted
** because of the following sub-derivation:

CmpExpr 
PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          OrExpr OR AndExpr 
                                                    AndExpr . AND CmpExpr 

** In state 173, looking ahead at AND, reducing production
** OrExpr -> OrExpr OR AndExpr 
** is permitted because of the following sub-derivation:

AndExpr AND CmpExpr // lookahead token appears
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          OrExpr OR AndExpr . 

** Conflict (shift/reduce) in state 171.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW CmpExpr EQ PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 171, looking ahead at PLUS, reducing production
** CmpExpr -> CmpExpr EQ PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          CmpExpr EQ PMExpr . 

** In state 171, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          CmpExpr EQ PMExpr 
                                                     PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 169.
** Token involved: EQ
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW CmpExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
(?)

** In state 169, looking ahead at EQ, reducing production
** AndExpr -> CmpExpr 
** is permitted because of the following sub-derivation:

CmpExpr EQ PMExpr // lookahead token appears
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr . 

** In state 169, looking ahead at EQ, shifting is permitted
** because of the following sub-derivation:

PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          CmpExpr . EQ PMExpr 

** Conflict (shift/reduce) in state 165.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW HExpr CONS PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 165, looking ahead at PLUS, reducing production
** HExpr -> PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          ConsExpr // lookahead token is inherited
                                          HExpr CONS ConsExpr // lookahead token is inherited
                                                     HExpr // lookahead token is inherited
                                                     PMExpr . 

** In state 165, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          ConsExpr 
                                          HExpr CONS ConsExpr 
                                                     HExpr CONS ConsExpr 
                                                     PMExpr 
                                                     PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 163.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW HExpr HAT PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 163, looking ahead at PLUS, reducing production
** HExpr -> HExpr HAT PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          ConsExpr // lookahead token is inherited
                                          HExpr // lookahead token is inherited
                                          HExpr HAT PMExpr . 

** In state 163, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          ConsExpr 
                                          HExpr CONS ConsExpr 
                                          HExpr HAT PMExpr 
                                                    PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 161.
** Tokens involved: HAT CONS
** The following explanations concentrate on token HAT.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW HExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
(?)

** In state 161, looking ahead at HAT, reducing production
** ConsExpr -> HExpr 
** is permitted because of the following sub-derivation:

ConsExpr 
HExpr CONS ConsExpr 
HExpr HAT PMExpr // lookahead token appears
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          ConsExpr // lookahead token is inherited
                                          HExpr . 

** In state 161, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          ConsExpr 
                                          HExpr CONS ConsExpr 
                                          HExpr . HAT PMExpr 

** Conflict (shift/reduce) in state 158.
** Token involved: OR
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW OrExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
(?)

** In state 158, looking ahead at OR, reducing production
** Expr -> OrExpr 
** is permitted because of the following sub-derivation:

OrExpr OR AndExpr // lookahead token appears
AndExpr // lookahead token is inherited
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr . 

** In state 158, looking ahead at OR, shifting is permitted
** because of the following sub-derivation:

AndExpr 
CmpExpr 
PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          OrExpr . OR AndExpr 

** Conflict (shift/reduce) in state 156.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW PMExpr LT PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 156, looking ahead at PLUS, reducing production
** CmpExpr -> PMExpr LT PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          PMExpr LT PMExpr . 

** In state 156, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          PMExpr LT PMExpr 
                                                    PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 153.
** Token involved: MULT
** This state is reached from toplevel after reading:

MExpr MULT FUN nonempty_list(IDt) RARROW MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
(?)

** In state 153, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

MExpr MULT LookRightExpr 
           FunExpr 
           FUN nonempty_list(IDt) RARROW Expr 
                                         OrExpr 
                                         AndExpr 
                                         CmpExpr 
                                         PMExpr LT PMExpr 
                                         MExpr 
                                         MExpr . MULT EExpr 

** In state 153, looking ahead at MULT, reducing production
** PMExpr -> MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT EExpr // lookahead token appears
MExpr MULT LookRightExpr // lookahead token is inherited
           FunExpr // lookahead token is inherited
           FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                         OrExpr // lookahead token is inherited
                                         AndExpr // lookahead token is inherited
                                         CmpExpr // lookahead token is inherited
                                         ConsExpr // lookahead token is inherited
                                         HExpr // lookahead token is inherited
                                         PMExpr // lookahead token is inherited
                                         MExpr . 

** Conflict (shift/reduce) in state 151.
** Token involved: MULT
** This state is reached from toplevel after reading:

MExpr MULT FUN nonempty_list(IDt) RARROW PMExpr MINUS MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
(?)

** In state 151, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

MExpr MULT LookRightExpr 
           FunExpr 
           FUN nonempty_list(IDt) RARROW Expr 
                                         OrExpr 
                                         AndExpr 
                                         CmpExpr 
                                         PMExpr LT PMExpr 
                                         PMExpr MINUS MExpr 
                                                      MExpr . MULT EExpr 

** In state 151, looking ahead at MULT, reducing production
** PMExpr -> PMExpr MINUS MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT EExpr // lookahead token appears
MExpr MULT LookRightExpr // lookahead token is inherited
           FunExpr // lookahead token is inherited
           FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                         OrExpr // lookahead token is inherited
                                         AndExpr // lookahead token is inherited
                                         CmpExpr // lookahead token is inherited
                                         ConsExpr // lookahead token is inherited
                                         HExpr // lookahead token is inherited
                                         PMExpr // lookahead token is inherited
                                         PMExpr MINUS MExpr . 

** Conflict (shift/reduce) in state 149.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW PMExpr MT PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 149, looking ahead at PLUS, reducing production
** CmpExpr -> PMExpr MT PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          PMExpr MT PMExpr . 

** In state 149, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          PMExpr MT PMExpr 
                                                    PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 130.
** Token involved: MULT
** This state is reached from toplevel after reading:

MExpr MULT FUN nonempty_list(IDt) RARROW PMExpr PLUS MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
(?)

** In state 130, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

MExpr MULT LookRightExpr 
           FunExpr 
           FUN nonempty_list(IDt) RARROW Expr 
                                         OrExpr 
                                         AndExpr 
                                         CmpExpr 
                                         PMExpr LT PMExpr 
                                         PMExpr PLUS MExpr 
                                                     MExpr . MULT EExpr 

** In state 130, looking ahead at MULT, reducing production
** PMExpr -> PMExpr PLUS MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT EExpr // lookahead token appears
MExpr MULT LookRightExpr // lookahead token is inherited
           FunExpr // lookahead token is inherited
           FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                         OrExpr // lookahead token is inherited
                                         AndExpr // lookahead token is inherited
                                         CmpExpr // lookahead token is inherited
                                         ConsExpr // lookahead token is inherited
                                         HExpr // lookahead token is inherited
                                         PMExpr // lookahead token is inherited
                                         PMExpr PLUS MExpr . 

** Conflict (shift/reduce) in state 127.
** Tokens involved: PLUS MT MINUS LT
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 127, looking ahead at PLUS, reducing production
** HExpr -> PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          ConsExpr // lookahead token is inherited
                                          HExpr // lookahead token is inherited
                                          PMExpr . 

** In state 127, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          PMExpr LT PMExpr 
                                          PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 119.
** Token involved: DOT
** This state is reached from toplevel after reading:

ProjExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 119, looking ahead at DOT, reducing production
** CnstrExpr -> ProjExpr 
** is permitted because of the following sub-derivation:

RcdAssignExpr 
Expr DOT ID LARROW RcdAssignExpr // lookahead token appears
OrExpr // lookahead token is inherited
AndExpr // lookahead token is inherited
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
MExpr // lookahead token is inherited
EExpr // lookahead token is inherited
AppExpr // lookahead token is inherited
FunInfixExpr // lookahead token is inherited
CnstrExpr // lookahead token is inherited
ProjExpr . 

** In state 119, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
EExpr 
AppExpr EXPO EExpr 
FunInfixExpr 
CnstrExpr 
ProjExpr 
ProjExpr . DOT ID 

** Conflict (shift/reduce) in state 116.
** Tokens involved: TRUE STRINGV LPAREN LCLYBRA LBOXBRA INTV ID FALSE CNSTR
** The following explanations concentrate on token TRUE.
** This state is reached from toplevel after reading:

CNSTR 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
EExpr 
AppExpr EXPO EExpr 
(?)

** In state 116, looking ahead at TRUE, shifting is permitted
** because of the following sub-derivation:

FunInfixExpr 
CnstrExpr 
CNSTR CnstrExpr 
      ProjExpr 
      AExpr 
      . TRUE 

** In state 116, looking ahead at TRUE, reducing production
** CnstrExpr -> CNSTR 
** is permitted because of the following sub-derivation:

AppExpr FunInfixExpr // lookahead token appears because FunInfixExpr can begin with TRUE
FunInfixExpr // lookahead token is inherited
CnstrExpr // lookahead token is inherited
CNSTR . 

** Conflict (shift/reduce) in state 38.
** Token involved: RPAREN
** This state is reached from toplevel after reading:

LPAREN Expr COLON LPAREN FunType 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
EExpr 
AppExpr EXPO EExpr 
FunInfixExpr 
CnstrExpr 
ProjExpr 
AExpr 
LPAREN Expr COLON FunType RPAREN 
                  TupleType RARROW FunType 
                  AType 
                  (?)

** In state 38, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

LPAREN FunType . RPAREN 

** In state 38, looking ahead at RPAREN, reducing production
** ListedTypeParameters -> FunType 
** is permitted because of the following sub-derivation:

TypeParameters ID 
LPAREN ListedTypeParameters RPAREN // lookahead token appears
       FunType . 

** Conflict (shift/reduce) in state 30.
** Tokens involved: RARROW MULT ID
** The following explanations concentrate on token RARROW.
** This state is reached from toplevel after reading:

LPAREN Expr COLON FunType MULT TupleType 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
EExpr 
AppExpr EXPO EExpr 
FunInfixExpr 
CnstrExpr 
ProjExpr 
AExpr 
LPAREN Expr COLON FunType RPAREN 
                  (?)

** In state 30, looking ahead at RARROW, shifting is permitted
** because of the following sub-derivation:

TupleType RARROW FunType 
TupleHeadType 
FunType TupleTailType 
        MULT TupleType 
             TupleHeadType 
             FunType TupleTailType 
             TupleType . RARROW FunType 

** In state 30, looking ahead at RARROW, reducing production
** TupleTailType -> MULT TupleType 
** is permitted because of the following sub-derivation:

TupleType RARROW FunType // lookahead token appears
TupleHeadType // lookahead token is inherited
FunType TupleTailType // lookahead token is inherited
        MULT TupleType . 

** Conflict (shift/reduce) in state 28.
** Tokens involved: MULT ID
** The following explanations concentrate on token MULT.
** This state is reached from toplevel after reading:

LPAREN Expr COLON TupleType RARROW FunType 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
EExpr 
AppExpr EXPO EExpr 
FunInfixExpr 
CnstrExpr 
ProjExpr 
AExpr 
LPAREN Expr COLON FunType RPAREN 
                  (?)

** In state 28, looking ahead at MULT, reducing production
** FunType -> TupleType RARROW FunType 
** is permitted because of the following sub-derivation:

TupleType RARROW FunType 
TupleHeadType 
FunType TupleTailType // lookahead token appears because TupleTailType can begin with MULT
TupleType RARROW FunType . 

** In state 28, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

TupleType RARROW FunType 
                 TupleType RARROW FunType 
                 TupleHeadType 
                 FunType TupleTailType 
                         . MULT TupleType 
