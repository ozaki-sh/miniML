
** Conflict (shift/reduce) in state 317.
** Token involved: BAR
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern list(MorePattern) RARROW MATCH Expr WITH option(BAR) Pattern list(MorePattern) RARROW Expr MorePatternMatchExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            (?)

** In state 317, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                                 MatchExpr 
                                 MATCH Expr WITH option(BAR) PatternMatchExpr 
                                                             Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                                                                                                   MorePatternMatchExpr list(MorePatternMatchExpr) 
                                                                                                                        MorePatternMatchExpr list(MorePatternMatchExpr) 
                                                                                                                        . BAR Pattern list(MorePattern) RARROW Expr 

** In state 317, looking ahead at BAR, reducing production
** list(MorePatternMatchExpr) -> 
** is permitted because of the following sub-derivation:

Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token appears because list(MorePatternMatchExpr) can begin with BAR
                                 MatchExpr // lookahead token is inherited
                                 MATCH Expr WITH option(BAR) PatternMatchExpr // lookahead token is inherited
                                                             Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                                                   MorePatternMatchExpr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                                                                        . 

** Conflict (shift/reduce) in state 313.
** Token involved: COMMA
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern list(MorePattern) RARROW Expr BAR Pattern list(MorePattern) RARROW Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 313, looking ahead at COMMA, reducing production
** MorePatternMatchExpr -> BAR Pattern list(MorePattern) RARROW Expr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr TupleTailExpr // lookahead token appears because TupleTailExpr can begin with COMMA
MatchExpr // lookahead token is inherited
MATCH Expr WITH option(BAR) PatternMatchExpr // lookahead token is inherited
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                  MorePatternMatchExpr list(MorePatternMatchExpr) // lookahead token is inherited because list(MorePatternMatchExpr) can vanish
                                                                  BAR Pattern list(MorePattern) RARROW Expr . 

** In state 313, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                                                                  MorePatternMatchExpr list(MorePatternMatchExpr) 
                                                                  BAR Pattern list(MorePattern) RARROW Expr 
                                                                                                       TupleHeadExpr 
                                                                                                       Expr TupleTailExpr 
                                                                                                            . COMMA Expr 

** Conflict (shift/reduce) in state 308.
** Tokens involved: COMMA BAR
** The following explanations concentrate on token COMMA.
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern list(MorePattern) RARROW Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 308, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                                                             TupleHeadExpr 
                                                             Expr TupleTailExpr 
                                                                  . COMMA Expr 

** In state 308, looking ahead at COMMA, reducing production
** list(MorePatternMatchExpr) -> 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr TupleTailExpr // lookahead token appears because TupleTailExpr can begin with COMMA
MatchExpr // lookahead token is inherited
MATCH Expr WITH option(BAR) PatternMatchExpr // lookahead token is inherited
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token is inherited
                                                                  . 

** Conflict (reduce/reduce) in state 279.
** Tokens involved: SEMI RPAREN RCLYBRA RBOXBRA RARROW COMMA COLON BAR
** The following explanations concentrate on token RARROW.
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern COMMA Pattern TupleTailPattern 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) // lookahead token appears because list(MorePattern) can vanish
                            TuplePattern // lookahead token is inherited
                            TupleHeadPattern // lookahead token is inherited
                            Pattern TupleTailPattern // lookahead token is inherited
                                    (?)

** In state 279, looking ahead at RARROW, reducing production
** TupleHeadPattern -> Pattern TupleTailPattern 
** is permitted because of the following sub-derivation:

COMMA Pattern // lookahead token is inherited
      TuplePattern // lookahead token is inherited
      TupleHeadPattern // lookahead token is inherited
      Pattern TupleTailPattern . 

** In state 279, looking ahead at RARROW, reducing production
** TupleTailPattern -> COMMA Pattern TupleTailPattern 
** is permitted because of the following sub-derivation:

COMMA Pattern TupleTailPattern . 

** Conflict (shift/reduce) in state 278.
** Token involved: COMMA
** This state is reached from toplevel after reading:

MATCH Expr WITH option(BAR) Pattern COMMA Pattern 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
MatchExpr 
MATCH Expr WITH option(BAR) PatternMatchExpr 
                            Pattern list(MorePattern) RARROW Expr list(MorePatternMatchExpr) 
                            TuplePattern 
                            TupleHeadPattern 
                            (?)

** In state 278, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

Pattern TupleTailPattern 
        COMMA Pattern TupleTailPattern 
                      . COMMA Pattern 

** In state 278, looking ahead at COMMA, reducing production
** TupleTailPattern -> COMMA Pattern 
** is permitted because of the following sub-derivation:

Pattern TupleTailPattern // lookahead token appears because TupleTailPattern can begin with COMMA
TuplePattern // lookahead token is inherited
TupleHeadPattern // lookahead token is inherited
Pattern TupleTailPattern // lookahead token is inherited
        COMMA Pattern . 

** Conflict (shift/reduce) in state 244.
** Token involved: COMMA
** This state is reached from toplevel after reading:

LET ID LetFunExpr IN Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 244, looking ahead at COMMA, reducing production
** LetAndExpr -> ID LetFunExpr IN Expr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr TupleTailExpr // lookahead token appears because TupleTailExpr can begin with COMMA
LetExpr // lookahead token is inherited
LET LetAndExpr // lookahead token is inherited
    ID LetFunExpr IN Expr . 

** In state 244, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LetExpr 
LET LetAndExpr 
    ID LetFunExpr IN Expr 
                     TupleHeadExpr 
                     Expr TupleTailExpr 
                          . COMMA Expr 

** Conflict (shift/reduce) in state 242.
** Token involved: COMMA
** This state is reached from toplevel after reading:

LET IDt EQ Expr IN Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 242, looking ahead at COMMA, reducing production
** LetAndExpr -> IDt EQ Expr IN Expr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr TupleTailExpr // lookahead token appears because TupleTailExpr can begin with COMMA
LetExpr // lookahead token is inherited
LET LetAndExpr // lookahead token is inherited
    IDt EQ Expr IN Expr . 

** In state 242, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LetExpr 
LET LetAndExpr 
    IDt EQ Expr IN Expr 
                   TupleHeadExpr 
                   Expr TupleTailExpr 
                        . COMMA Expr 

** Conflict (shift/reduce) in state 230.
** Token involved: COMMA
** This state is reached from toplevel after reading:

LET REC ID LetFunExpr IN Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 230, looking ahead at COMMA, reducing production
** LetRecAndExpr -> ID LetFunExpr IN Expr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr TupleTailExpr // lookahead token appears because TupleTailExpr can begin with COMMA
LetRecExpr // lookahead token is inherited
LET REC LetRecAndExpr // lookahead token is inherited
        ID LetFunExpr IN Expr . 

** In state 230, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LetRecExpr 
LET REC LetRecAndExpr 
        ID LetFunExpr IN Expr 
                         TupleHeadExpr 
                         Expr TupleTailExpr 
                              . COMMA Expr 

** Conflict (shift/reduce) in state 228.
** Token involved: COMMA
** This state is reached from toplevel after reading:

LET REC IDt EQ FunExpr IN Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 228, looking ahead at COMMA, reducing production
** LetRecAndExpr -> IDt EQ FunExpr IN Expr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr TupleTailExpr // lookahead token appears because TupleTailExpr can begin with COMMA
LetRecExpr // lookahead token is inherited
LET REC LetRecAndExpr // lookahead token is inherited
        IDt EQ FunExpr IN Expr . 

** In state 228, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LetRecExpr 
LET REC LetRecAndExpr 
        IDt EQ FunExpr IN Expr 
                          TupleHeadExpr 
                          Expr TupleTailExpr 
                               . COMMA Expr 

** Conflict (shift/reduce) in state 189.
** Token involved: COMMA
** This state is reached from toplevel after reading:

IF Expr THEN Expr ELSE Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 189, looking ahead at COMMA, reducing production
** IfExpr -> IF Expr THEN Expr ELSE Expr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr TupleTailExpr // lookahead token appears because TupleTailExpr can begin with COMMA
IfExpr // lookahead token is inherited
IF Expr THEN Expr ELSE Expr . 

** In state 189, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

IfExpr 
IF Expr THEN Expr ELSE Expr 
                       TupleHeadExpr 
                       Expr TupleTailExpr 
                            . COMMA Expr 

** Conflict (shift/reduce) in state 184.
** Token involved: COMMA
** This state is reached from toplevel after reading:

FUN nonempty_list(IDt) RARROW Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 184, looking ahead at COMMA, reducing production
** FunExpr -> FUN nonempty_list(IDt) RARROW Expr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr TupleTailExpr // lookahead token appears because TupleTailExpr can begin with COMMA
FunExpr // lookahead token is inherited
FUN nonempty_list(IDt) RARROW Expr . 

** In state 184, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

FunExpr 
FUN nonempty_list(IDt) RARROW Expr 
                              TupleHeadExpr 
                              Expr TupleTailExpr 
                                   . COMMA Expr 

** Conflict (shift/reduce) in state 180.
** Token involved: AND
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW AndExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
(?)

** In state 180, looking ahead at AND, shifting is permitted
** because of the following sub-derivation:

CmpExpr 
PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          AndExpr . AND CmpExpr 

** In state 180, looking ahead at AND, reducing production
** OrExpr -> AndExpr 
** is permitted because of the following sub-derivation:

AndExpr AND CmpExpr // lookahead token appears
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr . 

** Conflict (reduce/reduce) in state 178.
** Tokens involved: WITH THEN SEMISEMI SEMI RPAREN RCLYBRA RBOXBRA PLUS OR MULT MT MINUS METAAND LT LET IN HAT EQ ELSE CONS COMMA COLON BAR AND
** The following explanations concentrate on token SEMISEMI.
** This state is reached from toplevel after reading:

Expr COMMA Expr TupleTailExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI // lookahead token appears
TupleHeadExpr // lookahead token is inherited
Expr TupleTailExpr // lookahead token is inherited
     (?)

** In state 178, looking ahead at SEMISEMI, reducing production
** TupleHeadExpr -> Expr TupleTailExpr 
** is permitted because of the following sub-derivation:

COMMA Expr // lookahead token is inherited
      TupleHeadExpr // lookahead token is inherited
      Expr TupleTailExpr . 

** In state 178, looking ahead at SEMISEMI, reducing production
** TupleTailExpr -> COMMA Expr TupleTailExpr 
** is permitted because of the following sub-derivation:

COMMA Expr TupleTailExpr . 

** Conflict (shift/reduce) in state 177.
** Token involved: COMMA
** This state is reached from toplevel after reading:

Expr COMMA Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
TupleHeadExpr 
(?)

** In state 177, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

Expr TupleTailExpr 
     COMMA Expr TupleTailExpr 
                . COMMA Expr 

** In state 177, looking ahead at COMMA, reducing production
** TupleTailExpr -> COMMA Expr 
** is permitted because of the following sub-derivation:

Expr TupleTailExpr // lookahead token appears because TupleTailExpr can begin with COMMA
TupleHeadExpr // lookahead token is inherited
Expr TupleTailExpr // lookahead token is inherited
     COMMA Expr . 

** Conflict (shift/reduce) in state 175.
** Token involved: COMMA
** This state is reached from toplevel after reading:

DFUN nonempty_list(IDt) RARROW Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
(?)

** In state 175, looking ahead at COMMA, reducing production
** DFunExpr -> DFUN nonempty_list(IDt) RARROW Expr 
** is permitted because of the following sub-derivation:

TupleHeadExpr 
Expr TupleTailExpr // lookahead token appears because TupleTailExpr can begin with COMMA
DFunExpr // lookahead token is inherited
DFUN nonempty_list(IDt) RARROW Expr . 

** In state 175, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

DFunExpr 
DFUN nonempty_list(IDt) RARROW Expr 
                               TupleHeadExpr 
                               Expr TupleTailExpr 
                                    . COMMA Expr 

** Conflict (shift/reduce) in state 169.
** Token involved: EQ
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW AndExpr AND CmpExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
(?)

** In state 169, looking ahead at EQ, reducing production
** AndExpr -> AndExpr AND CmpExpr 
** is permitted because of the following sub-derivation:

CmpExpr EQ PMExpr // lookahead token appears
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          AndExpr AND CmpExpr . 

** In state 169, looking ahead at EQ, shifting is permitted
** because of the following sub-derivation:

PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          AndExpr AND CmpExpr 
                                                      CmpExpr . EQ PMExpr 

** Conflict (shift/reduce) in state 166.
** Token involved: AND
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW OrExpr OR AndExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
(?)

** In state 166, looking ahead at AND, shifting is permitted
** because of the following sub-derivation:

CmpExpr 
PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          OrExpr OR AndExpr 
                                                    AndExpr . AND CmpExpr 

** In state 166, looking ahead at AND, reducing production
** OrExpr -> OrExpr OR AndExpr 
** is permitted because of the following sub-derivation:

AndExpr AND CmpExpr // lookahead token appears
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          OrExpr OR AndExpr . 

** Conflict (shift/reduce) in state 164.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW CmpExpr EQ PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 164, looking ahead at PLUS, reducing production
** CmpExpr -> CmpExpr EQ PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          CmpExpr EQ PMExpr . 

** In state 164, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          CmpExpr EQ PMExpr 
                                                     PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 162.
** Token involved: EQ
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW CmpExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
(?)

** In state 162, looking ahead at EQ, reducing production
** AndExpr -> CmpExpr 
** is permitted because of the following sub-derivation:

CmpExpr EQ PMExpr // lookahead token appears
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr . 

** In state 162, looking ahead at EQ, shifting is permitted
** because of the following sub-derivation:

PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          CmpExpr . EQ PMExpr 

** Conflict (shift/reduce) in state 158.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW HExpr CONS PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 158, looking ahead at PLUS, reducing production
** HExpr -> PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          ConsExpr // lookahead token is inherited
                                          HExpr CONS ConsExpr // lookahead token is inherited
                                                     HExpr // lookahead token is inherited
                                                     PMExpr . 

** In state 158, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          ConsExpr 
                                          HExpr CONS ConsExpr 
                                                     HExpr CONS ConsExpr 
                                                     PMExpr 
                                                     PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 156.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW HExpr HAT PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 156, looking ahead at PLUS, reducing production
** HExpr -> HExpr HAT PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          ConsExpr // lookahead token is inherited
                                          HExpr // lookahead token is inherited
                                          HExpr HAT PMExpr . 

** In state 156, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          ConsExpr 
                                          HExpr CONS ConsExpr 
                                          HExpr HAT PMExpr 
                                                    PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 154.
** Tokens involved: HAT CONS
** The following explanations concentrate on token HAT.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW HExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
(?)

** In state 154, looking ahead at HAT, reducing production
** ConsExpr -> HExpr 
** is permitted because of the following sub-derivation:

ConsExpr 
HExpr CONS ConsExpr 
HExpr HAT PMExpr // lookahead token appears
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          ConsExpr // lookahead token is inherited
                                          HExpr . 

** In state 154, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          ConsExpr 
                                          HExpr CONS ConsExpr 
                                          HExpr . HAT PMExpr 

** Conflict (shift/reduce) in state 151.
** Token involved: OR
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW OrExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
(?)

** In state 151, looking ahead at OR, reducing production
** Expr -> OrExpr 
** is permitted because of the following sub-derivation:

OrExpr OR AndExpr // lookahead token appears
AndExpr // lookahead token is inherited
CmpExpr // lookahead token is inherited
ConsExpr // lookahead token is inherited
HExpr // lookahead token is inherited
PMExpr // lookahead token is inherited
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr . 

** In state 151, looking ahead at OR, shifting is permitted
** because of the following sub-derivation:

AndExpr 
CmpExpr 
PMExpr LT PMExpr 
PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          OrExpr . OR AndExpr 

** Conflict (shift/reduce) in state 149.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW PMExpr LT PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 149, looking ahead at PLUS, reducing production
** CmpExpr -> PMExpr LT PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          PMExpr LT PMExpr . 

** In state 149, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          PMExpr LT PMExpr 
                                                    PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 146.
** Token involved: MULT
** This state is reached from toplevel after reading:

MExpr MULT FUN nonempty_list(IDt) RARROW MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
(?)

** In state 146, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

MExpr MULT LookRightExpr 
           FunExpr 
           FUN nonempty_list(IDt) RARROW Expr 
                                         OrExpr 
                                         AndExpr 
                                         CmpExpr 
                                         PMExpr LT PMExpr 
                                         MExpr 
                                         MExpr . MULT EExpr 

** In state 146, looking ahead at MULT, reducing production
** PMExpr -> MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT EExpr // lookahead token appears
MExpr MULT LookRightExpr // lookahead token is inherited
           FunExpr // lookahead token is inherited
           FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                         OrExpr // lookahead token is inherited
                                         AndExpr // lookahead token is inherited
                                         CmpExpr // lookahead token is inherited
                                         ConsExpr // lookahead token is inherited
                                         HExpr // lookahead token is inherited
                                         PMExpr // lookahead token is inherited
                                         MExpr . 

** Conflict (shift/reduce) in state 144.
** Token involved: MULT
** This state is reached from toplevel after reading:

MExpr MULT FUN nonempty_list(IDt) RARROW PMExpr MINUS MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
(?)

** In state 144, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

MExpr MULT LookRightExpr 
           FunExpr 
           FUN nonempty_list(IDt) RARROW Expr 
                                         OrExpr 
                                         AndExpr 
                                         CmpExpr 
                                         PMExpr LT PMExpr 
                                         PMExpr MINUS MExpr 
                                                      MExpr . MULT EExpr 

** In state 144, looking ahead at MULT, reducing production
** PMExpr -> PMExpr MINUS MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT EExpr // lookahead token appears
MExpr MULT LookRightExpr // lookahead token is inherited
           FunExpr // lookahead token is inherited
           FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                         OrExpr // lookahead token is inherited
                                         AndExpr // lookahead token is inherited
                                         CmpExpr // lookahead token is inherited
                                         ConsExpr // lookahead token is inherited
                                         HExpr // lookahead token is inherited
                                         PMExpr // lookahead token is inherited
                                         PMExpr MINUS MExpr . 

** Conflict (shift/reduce) in state 142.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW PMExpr MT PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 142, looking ahead at PLUS, reducing production
** CmpExpr -> PMExpr MT PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          PMExpr MT PMExpr . 

** In state 142, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          PMExpr MT PMExpr 
                                                    PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 123.
** Token involved: MULT
** This state is reached from toplevel after reading:

MExpr MULT FUN nonempty_list(IDt) RARROW PMExpr PLUS MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
(?)

** In state 123, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

MExpr MULT LookRightExpr 
           FunExpr 
           FUN nonempty_list(IDt) RARROW Expr 
                                         OrExpr 
                                         AndExpr 
                                         CmpExpr 
                                         PMExpr LT PMExpr 
                                         PMExpr PLUS MExpr 
                                                     MExpr . MULT EExpr 

** In state 123, looking ahead at MULT, reducing production
** PMExpr -> PMExpr PLUS MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT EExpr // lookahead token appears
MExpr MULT LookRightExpr // lookahead token is inherited
           FunExpr // lookahead token is inherited
           FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                         OrExpr // lookahead token is inherited
                                         AndExpr // lookahead token is inherited
                                         CmpExpr // lookahead token is inherited
                                         ConsExpr // lookahead token is inherited
                                         HExpr // lookahead token is inherited
                                         PMExpr // lookahead token is inherited
                                         PMExpr PLUS MExpr . 

** Conflict (shift/reduce) in state 120.
** Tokens involved: PLUS MT MINUS LT
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

PMExpr PLUS FUN nonempty_list(IDt) RARROW PMExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
(?)

** In state 120, looking ahead at PLUS, reducing production
** HExpr -> PMExpr 
** is permitted because of the following sub-derivation:

PMExpr PLUS MExpr // lookahead token appears
PMExpr PLUS LookRightExpr // lookahead token is inherited
            FunExpr // lookahead token is inherited
            FUN nonempty_list(IDt) RARROW Expr // lookahead token is inherited
                                          OrExpr // lookahead token is inherited
                                          AndExpr // lookahead token is inherited
                                          CmpExpr // lookahead token is inherited
                                          ConsExpr // lookahead token is inherited
                                          HExpr // lookahead token is inherited
                                          PMExpr . 

** In state 120, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

PMExpr PLUS LookRightExpr 
            FunExpr 
            FUN nonempty_list(IDt) RARROW Expr 
                                          OrExpr 
                                          AndExpr 
                                          CmpExpr 
                                          PMExpr LT PMExpr 
                                          PMExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 110.
** Tokens involved: TRUE STRINGV LPAREN LCLYBRA LBOXBRA INTV ID FALSE CNSTR
** The following explanations concentrate on token TRUE.
** This state is reached from toplevel after reading:

CNSTR 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
EExpr 
AppExpr EXPO EExpr 
(?)

** In state 110, looking ahead at TRUE, shifting is permitted
** because of the following sub-derivation:

FunInfixExpr 
CnstrExpr 
CNSTR CnstrExpr 
      ProjExpr 
      AExpr 
      . TRUE 

** In state 110, looking ahead at TRUE, reducing production
** CnstrExpr -> CNSTR 
** is permitted because of the following sub-derivation:

AppExpr FunInfixExpr // lookahead token appears because FunInfixExpr can begin with TRUE
FunInfixExpr // lookahead token is inherited
CnstrExpr // lookahead token is inherited
CNSTR . 

** Conflict (reduce/reduce) in state 34.
** Tokens involved: MULT ID
** The following explanations concentrate on token MULT.
** This state is reached from toplevel after reading:

LPAREN Expr COLON AType RARROW FunType 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
EExpr 
AppExpr EXPO EExpr 
FunInfixExpr 
CnstrExpr 
ProjExpr 
AExpr 
LPAREN Expr COLON TupleType RPAREN 
                  (?)

** In state 34, looking ahead at MULT, reducing production
** FunType -> AType RARROW FunType 
** is permitted because of the following sub-derivation:

TupleHeadType 
TupleType TupleTailType // lookahead token appears because TupleTailType can begin with MULT
FunType // lookahead token is inherited
AType RARROW FunType . 

** In state 34, looking ahead at MULT, reducing production
** TupleType -> FunType 
** is permitted because of the following sub-derivation:

FunType 
AType RARROW FunType 
             AType RARROW FunType 
             TypeParameters ID 
             TupleType 
             TupleHeadType 
             TupleType TupleTailType // lookahead token appears because TupleTailType can begin with MULT
             FunType . 

** Conflict (reduce/reduce) in state 27.
** Tokens involved: TYPE SEMISEMI SEMI RPAREN RCLYBRA MULT METAAND ID EQ COMMA BAR
** The following explanations concentrate on token RPAREN.
** This state is reached from toplevel after reading:

LPAREN Expr COLON TupleType MULT TupleType TupleTailType 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
EExpr 
AppExpr EXPO EExpr 
FunInfixExpr 
CnstrExpr 
ProjExpr 
AExpr 
LPAREN Expr COLON TupleType RPAREN // lookahead token appears
                  TupleHeadType // lookahead token is inherited
                  TupleType TupleTailType // lookahead token is inherited
                            (?)

** In state 27, looking ahead at RPAREN, reducing production
** TupleHeadType -> TupleType TupleTailType 
** is permitted because of the following sub-derivation:

MULT TupleType // lookahead token is inherited
     TupleHeadType // lookahead token is inherited
     TupleType TupleTailType . 

** In state 27, looking ahead at RPAREN, reducing production
** TupleTailType -> MULT TupleType TupleTailType 
** is permitted because of the following sub-derivation:

MULT TupleType TupleTailType . 

** Conflict (shift/reduce) in state 26.
** Tokens involved: MULT ID
** The following explanations concentrate on token MULT.
** This state is reached from toplevel after reading:

LPAREN Expr COLON TupleType MULT TupleType 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
EExpr 
AppExpr EXPO EExpr 
FunInfixExpr 
CnstrExpr 
ProjExpr 
AExpr 
LPAREN Expr COLON TupleType RPAREN 
                  TupleHeadType 
                  (?)

** In state 26, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

TupleType TupleTailType 
          MULT TupleType TupleTailType 
                         . MULT TupleType 

** In state 26, looking ahead at MULT, reducing production
** TupleTailType -> MULT TupleType 
** is permitted because of the following sub-derivation:

TupleType TupleTailType // lookahead token appears because TupleTailType can begin with MULT
TupleHeadType // lookahead token is inherited
TupleType TupleTailType // lookahead token is inherited
          MULT TupleType . 

** Conflict (shift/reduce) in state 23.
** Token involved: RPAREN
** This state is reached from toplevel after reading:

LPAREN Expr COLON LPAREN TupleType 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
OrExpr 
AndExpr 
CmpExpr 
PMExpr LT PMExpr 
MExpr 
EExpr 
AppExpr EXPO EExpr 
FunInfixExpr 
CnstrExpr 
ProjExpr 
AExpr 
LPAREN Expr COLON TupleType RPAREN 
                  FunType 
                  AType RARROW FunType 
                  (?)

** In state 23, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

LPAREN TupleType . RPAREN 

** In state 23, looking ahead at RPAREN, reducing production
** ListedTypeParameters -> TupleType 
** is permitted because of the following sub-derivation:

TypeParameters ID 
LPAREN ListedTypeParameters RPAREN // lookahead token appears
       TupleType . 
